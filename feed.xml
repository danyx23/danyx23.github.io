<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Bachler</title>
    <description>The personal website of Daniel Bachler - Software Engineer and Photographer
</description>
    <link>https://danielbachler.de/</link>
    <atom:link href="https://danielbachler.de/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 16 Nov 2024 09:08:56 -0600</pubDate>
    <lastBuildDate>Sat, 16 Nov 2024 09:08:56 -0600</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>If you are worried about dangerous AI you should be in favour of banning remote controlled weapons</title>
        <description>&lt;p&gt;I’m a bit puzzled by public discourse on AI safety. It is great that the general topic has now reached mainstream media - merely a year ago this was very much a fringe topic. Nowadays it has become a primary discussion point in high-level political gatherings and has inspired numerous op-eds in prominent publications.&lt;/p&gt;

&lt;p&gt;Nevertheless, most discussions advocating for increased AI safety recommend either „more alignment research“, stringent regulation, or total abstinence. While I believe that alignment research is a valuable endeavour, I am sceptical about the overall effectiveness it will have. As for regulation, I am in favour of transparency legislation that ensures visibility into ongoing AI research and training. Heavy handed regulation on the other hand could obstruct very important gains, such as making LLMs confabulate/hallucinate less. Since these main recommendations seem limited to me, I think we should consider more scenarios and contemplate possible short term actions.&lt;/p&gt;

&lt;p&gt;Let us entertain the idea that superhuman AI agents will become possible within the next decade. I would characterize such systems as computer systems that can interface with the internet and that, unlike today‘s LLMs, can make effective long term plans, learn continuously from single counterexamples and perform basically almost all tasks that a human can do via a computer at a higher level than the average human. At the same time they would of course be faster and would be very proficient both in coding and hacking computer systems. &lt;/p&gt;

&lt;p&gt;I want to entertain this idea not because I think it is a very likely outcome, but rather because I think it is within the realm of the possible, given the wide uncertainty about the development of AI in the near to medium future. Additionally, I would not have predicted today’s state of AI correctly ten years ago (which I think is true for a very large percentage of humanity) and so I want to consider a wider set of outcomes going forward.&lt;/p&gt;

&lt;p&gt;If we take the above possibility as a possible trajectory then what could we do today to make that world a lot better and safer? As the title of this post suggests, I think the number one thing that we should be discussing is how to outlaw or at least strongly limit the number and capabilities of remote controlled and autonomous weapons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Jean-Michel Basquiat - Riding with Death.jpg&quot; alt=&quot;Jean-Michel Basquiat - Riding with Death&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Riding with Death - Jean-Michel Basquiat, 1988&lt;/p&gt;

&lt;p&gt;This idea had a bit of traction in public discourse a few years ago when petitions like the &lt;a href=&quot;https://futureoflife.org/open-letter/lethal-autonomous-weapons-pledge/&quot;&gt;Lethal Autonomous Weapons Pledge&lt;/a&gt; from the &lt;a href=&quot;https://futureoflife.org/&quot;&gt;Future of Life institute&lt;/a&gt; were created. However, it seems to have lost momentum since then. I also believe that for AI safety concerns, autonomous and remote controlled weapons are equivalent. If powerful AI systems were very capable of hacking computer systems, then they could take over remote controlled weapons just as well as autonomous weapons, making both of them very dangerous.&lt;/p&gt;

&lt;p&gt;Imagine that a very capable AI decides to bomb the White House or the EU parliament. It might want to do so either because it was deliberately instructed to do this by a malicious actor or because by pursuing some other optimisation goal it thinks that it would be more successful if the WH or EU parliament or whatever else would not exist (similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Instrumental_convergence#Paperclip_maximizer&quot;&gt;paper clip maximiser idea&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;A world in which the military bases of the world are full of remote controlled armed drones or artillery is one in which this AI would have a much higher probability of succeeding. If dropping bombs or firing weapons is something that only humans at the site can do then it would be much harder (and hopefully close to impossible) to execute such a plan. A human pilot would hopefully not bomb their own seat of government even if they were sent plausible sounding commands to do so.&lt;/p&gt;

&lt;p&gt;I am aware of course that with the predator drones that the US has employed in Iraq and Afghanistan, and the Turkish and Iranian drones employed by both sides in the war in Ukraine, we are well into this world of remote controlled armed weapons.&lt;/p&gt;

&lt;p&gt;Militaries around the world along with their Defence industries suppliers will undoubtedly present many arguments in favour of remote controlled weapons. They will claim that of course their systems will be impossible to hack. They will argue that even if their country would voluntarily forgo such systems, their potential enemies would not.&lt;/p&gt;

&lt;p&gt;I believe that the best scenario would involve securing a comprehensive international treaty banning remote-controlled and autonomous weapons. I believe this is a goal worth fighting for.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Jean-Michel Basquiat - (Sans titre) Boxer.jpg&quot; alt=&quot;Sans titre (Boxer) - Jean Michel Basquiat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sans titre (Boxer) - Jean Michel Basquiat, 1982&lt;/p&gt;

&lt;p&gt;However, even if this turns out to not be realistic, I would like to see the public discourse on AI safety place greater emphasis on this issue and attempt to shift the Overton window. It would be highly valuable to put global militaries on the defensive in this regard.  At the very least, they should maintain a strictly limited arsenal of remote-controlled weapons; establish protocols that necessitate manual arming of weapons, exclusively performed by humans through unhackable command chains (i.e. as close to as we can get); and ensure that the procurement of remote-controlled weapons undergoes far greater oversight compared to other weapon systems. &lt;/p&gt;

&lt;p&gt;The higher the destructive potential of a weapons system, the harder it must be for militaries to operate them remotely. Nuclear weapons are of course at the top of the list here that must never be remote controlled - but there are plenty of very deadly weapons in our arsenals today and we should try very hard to firewall all of those against remote or autonomous control.&lt;/p&gt;

&lt;p&gt;Addressing this issue now is likely to be much easier than tackling it in ten years’ time. Today, the existing arsenals of remote controlled and autonomous systems are very limited and thus the resistance of militaries will be smaller than once large sums will have been invested in stocking those weapons. Acting sooner rather than later could make a crucial difference in preventing the widespread adoption and expansion of these potentially dangerous systems.&lt;/p&gt;

&lt;p&gt;Remote-controlled and autonomous weapons are not the only systems that can and should be strengthened today to mitigate adverse outcomes in a potential fast take-off AI future. Making our financial systems and stock markets more robust and hardening important communications infrastructure are also very worthwhile. But if we would pick one of those areas to start working on today, I think it should be strongly limiting remote weapons.&lt;/p&gt;

&lt;p&gt;(Note: this post was published &lt;a href=&quot;https://aihorizon.substack.com/p/if-you-are-worried-about-dangerous&quot;&gt;also on my Substack&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Jun 2023 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2023/06/11/autonomous-weapons.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2023/06/11/autonomous-weapons.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning in the age of ChatGPT</title>
        <description>&lt;p&gt;My wife has recently started learning Spanish in preparation for a trip to Mexico and Colombia. She uses a mix of Duolingo and Zoom conversations with a native speaker through &lt;a href=&quot;https://www.italki.com/&quot;&gt;iTalki&lt;/a&gt;. Duolingo is good for gamification, and it helps her practice phrase translation and vocabulary training every day. The conversations via iTalki are excellent for actually talking to other humans. However, between the two, she recently mentioned that she was missing something - an interaction a bit like conversations but with a stronger emphasis on correcting her mistakes. Her conversation partner does provide some corrections, but they can feel unnatural in a conversation and thus don’t occur frequently.&lt;/p&gt;

&lt;p&gt;I asked her if she would like to try using ChatGPT as a teacher and she was up for it. I prompted ChatGPT with the following prompt: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;„Please assume the role of a native Spanish speaker conversation partner. You will ask me questions about my trip through Colombia. If I make a mistake or if my reply is not worded as a native speaker would say this then please gently tell me what a native speaker would say instead before asking the next follow up question.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ChatGPT readily complied and my wife was sold after two paragraphs back and forth.&lt;/p&gt;

&lt;p&gt;Having an infinitely patient personal tutor that assumes the role you need is a really powerful concept. I have used variations of this for my work. It is fascinating to see how using GPT makes a much wider area of your profession available to you. I am fluent in five programming languages and can somewhat work in maybe ten more. There are many other interesting or useful programming languages that might be a slightly better fit for a problem, but the effort of learning a new language is often not worth the benefit. This calculation changes with GPT. All of a sudden, writing small programs in a language that I am not at all familiar with goes from “very tedious” to “not as fast” as one of the languages I know well. This doesn’t scale to big programs because understanding things at scale usually requires a deep understanding of the language, but quite often being able to write a simple tool in the optimal language is very valuable. Simon Willison has written a &lt;a href=&quot;https://simonwillison.net/2023/Mar/27/ai-enhanced-development/&quot;&gt;great post&lt;/a&gt; on a similar observation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Pablo Picasso - Girl with a Mandolin.jpg&quot; alt=&quot;Girl with a Mandolin - Pablo Picasso&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Girl with a Mandolin” by Pablo Picasso&lt;/p&gt;

&lt;p&gt;I also think that having a digital assistant at hand that can write simple pieces of code could unleash a new golden era of automation. It used to be the case that if you wanted something specific to happen automatically in your workflow, you either had to know how to code and be willing to put in the time to learn the API of the relevant tools, or you had to be lucky and the vendor of the tool had to already support this kind of automation in the UI. With GPT, it is now vastly more feasible to write little scripts, etc., without knowing how to program. This kind of use hits a complexity ceiling quickly, of course, but the fact that all of a sudden, the number of people who can reasonably attempt automating stuff goes from “all software developers” to roughly “all humans” is pretty wild. Hillel Wayne wrote about this possibility a while ago in his &lt;a href=&quot;https://buttondown.email/hillelwayne/archive/gpt-is-revolutionary/&quot;&gt;excellent newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Coming back to the idea of your own, personal non-human tutor - I wonder if some people might prefer opening up to a machine that they know will not judge them. A lot of people have substantial areas of middle or high school math that they never truly understood but were afraid to admit not truly understanding. If I can just ask my infinitely patient, non-judgemental personal teacher to walk me through trigonometry again, it might just click, finally.&lt;/p&gt;

&lt;p&gt;Reflecting on all of this and trying to put it into a bigger context, I wonder about the added benefit that something like a personal tutor could have for pupils, especially in poor countries with poor educational outcomes. Of course, there are many problems in impoverished countries that will not be helped by adding GPT - if kids don’t spend much time in school, a personal tutor will not help. Similarly, GPT is probably not a great solution for teaching kids to read and write in the first place. However, once kids get far enough along in school, I assume that a lot of potential brilliance is wasted due to individual students not receiving enough attention or teachers not being very well-educated themselves.&lt;/p&gt;

&lt;p&gt;I can definitely imagine that with a bit of work, a specially crafted solution that uses something like GPT could be very useful in helping kids achieve higher educational outcomes. Such a system would have to be prompted with the goal of the lesson and be able to keep some notes on students’ weaknesses - but then it could explain and question the student at whichever pace the student needs. Such a system could be pretty inexpensive to run, once you manage to have a simple internet-connected device available for each student (and with smart-phones becoming cheaper all the time, this might not be a significant hurdle).&lt;/p&gt;

&lt;p&gt;The scale of the challenge of educating kids better in poor countries is certainly big enough to warrant more attention. I just had a look at Nigeria as an example. It is home to 220 million people and &lt;a href=&quot;https://ourworldindata.org/grapher/comparison-of-world-population-projections?time=earliest..2050&amp;amp;country=~NGA&quot;&gt;projected to grow to 380&lt;/a&gt; million by 2050. The median age is &lt;a href=&quot;https://ourworldindata.org/grapher/median-age?country=~NGA&quot;&gt;17 years old&lt;/a&gt;. About 200 million children will need to go through school in the next 3 decades in Nigeria alone. Wouldn’t it be great if this new technology could be used to help many of them realize their potential?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Jacob Lawrence - Panel 58 - In the North the Negro had better educational facilities.jpg&quot; alt=&quot;“Panel 58 - In the North the Negro had better educational facilities” by Jacob Lawrence&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Panel 58 - In the North the Negro had better educational facilities” by Jacob Lawrence&lt;/p&gt;

&lt;p&gt;I am pretty excited about what LLMs will do for our ability to learn things more efficiently. If you haven’t used ChatGPT yet to learn something or write a little script for yourself then I suggest &lt;a href=&quot;https://chat.openai.com/&quot;&gt;giving it a try&lt;/a&gt;. You might have to experiment a bit with a good start prompt and you may have to remind it again in a longer chat to remember its role and instructions. If you run into an issue with coding just copy paste the error message into the conversation with GPT. Give it a spin - the outcomes can be quite remarkable.&lt;/p&gt;

&lt;p&gt;(Note: this post was published &lt;a href=&quot;https://aihorizon.substack.com/p/learning-in-the-age-of-chatgpt&quot;&gt;also on my Substack&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Apr 2023 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2023/04/26/learning-in-the-age-of-chatgpt.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2023/04/26/learning-in-the-age-of-chatgpt.html</guid>
        
        
      </item>
    
      <item>
        <title>Will we know if a company is close to transformative artificial intelligence?</title>
        <description>&lt;p&gt;Over the last few years it seemed like we were able to observe the cutting edge of AI research more or less in the open and more or less in real time. Some was in the form of public demos, some in academic papers, others directly in products. As the capabilities of these systems advance, however, I think we need to wonder if this will remain true, and consider the repercussions of what would happen if this changes.&lt;/p&gt;

&lt;p&gt;When I talk about new capabilities I mean things that would be a substantial improvement over the status quo of GPT4 or similar systems. To give a few examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The ability to form memories cheaply and quickly and be able to access them when relevant. Currently, every ChatGPT session is a tabula rasa. For instance if you mentioned where you live in a previous session, ChatGPT won’t remember it in the next. There are of course workarounds that are already used that basically duplicate part of the chat history into a new chat or allow some more sophisticated forms of relevant text recall via so called embeddings. But the former is limited by the text length the input to an LLM (Large Language Model) can have and the latter is limited by semantic similarity between the memory and the current context which is only a subset of how humans access memory. Both are pretty far from the kind of automatic, context sensitive memory formation (and forgetting!) that humans are capable of. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Being able to learn to avoid specific outcomes based on single counterexamples. Current LLMs are trained for a given time but once the training is over and they are used in “Inference mode” ( i.e. to complete text) they cannot learn anything new. This is again very much unlike how humans behave. We might be able to find workarounds for dealing with this with modified prompts but a system that could continue to learn and to learn from single counter examples would be substantially more powerful than current systems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Excelling at strategic long term goal planning and execution over long time horizons with fuzzy outcomes. This is maybe the most important of these. Today’s LLMs can be coaxed into outlining some semblance of a plan for non-trivial tasks, but this is currently quite limited. Because LLMs don’t learn anything new and have no sense of time passing, using them to execute actions over a long time span would need a lot of guidance that regularly invokes the LLM and encodes a timeline of what happened and what the overall plan was into text form (a bit like what the main character in the movie &lt;a href=&quot;https://www.imdb.com/title/tt0209144/&quot;&gt;Memento&lt;/a&gt; does). For many interesting, long run tasks, it would be desirable if AI systems would be more autonomous than that - if they would “exist continuously” in time, have a sense of time passing and be able to actively query the internet or the wider world and act on their own.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A system with such added capabilities would have a much wider set of applications than today‘s prompt answer systems like ChatGPT. Do you think the company that makes a breakthrough in one of those areas would immediately make it available to the public, either as a demo or paid product? Or might it keep the system secret and try to use it for its own benefit?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Rene Magritte - La Clef des champs.jpg&quot; alt=&quot;Rene Magritte, La Clef des champs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Are we sure we are seeing what tech companies are up to? Rene Magritte, La Clef des champs&lt;/p&gt;

&lt;p&gt;What could such benefits be? One obvious one is financial trading. To caricature this idea for added effect: There is a good chance that the first sentient digital being would be imprisoned by a tech company to trade stocks. Of course you don’t really need sentience - a system that is just really good at ingesting lots of information quickly and that can devise, modify and execute trading strategies efficiently might outperform both human traders and today’s high frequency trading systems. What does it do to our society, if one company has a consistent edge on everyone else in financial trading?&lt;/p&gt;

&lt;p&gt;Another possible benefit might be substantial advances in automated software development, including the development of better AIs. The systems of today like Github Copilot are pretty good at generating code at a very small scale but they are not very useful for making coordinated changes to complex systems. If a single company had a system that were able to make complex changes automatically, then that company might be able to create and improve software at a higher speed, at much lower cost, than others.&lt;/p&gt;

&lt;p&gt;It is of course possible that keeping this information secret would be hard; that the details of the breakthrough would quickly become common knowledge which would then be an incentive to turn it into a product (e.g. as virtual co-workers that you interact with over slack or similar but that have memory and can interact with other employees on their own to execute complex tasks that span days or weeks). But it seems equally possible that a single player could hold on to the key element of improvement for long enough to give it a substantial edge.&lt;/p&gt;

&lt;p&gt;Over the past 200 years, capitalism has relied on companies to drive a significant portion of societal development and innovation. This could give companies tremendous power so we developed anti-trust legislation and other mechanisms to avoid outright monopolies. We used tools like patents that grant state guaranteed exclusivity in return for sharing the blueprints of a technology. We relied on the fact that in the physical world, substantially scaling production is something that happens over the course of years. It also helped that knowledge disseminates over similar timelines. Together, these effects mostly assured that no single entity could accrue too high a share of the whole economy.&lt;/p&gt;

&lt;p&gt;Will this still be the case with AI? Progress in AI could be very quick to deploy and scale up - GPTChat has been used by over 100 million users within 2 months of being made public.  If a single company achieves a breakthrough, there is a genuine risk of it quickly becoming a dominant force. I think you don‘t have to be a socialist to see that having a single economic entity having a large advantage in this technology could be a huge problem.&lt;/p&gt;

&lt;p&gt;What are we to do? Stepping back from how we happen to organize society and our economy today, I think it is fair to say that if AI becomes a very powerful tool then we would want this to benefit mankind at large. Yet with the system we have in place today I think there is a very significant chance that it will instead make a few already very powerful tech companies even more powerful, very likely to an extremely unhealthy degree.&lt;/p&gt;

&lt;p&gt;Much capital is currently invested into AI precisely because the returns could be very large. We will not be able to reconfigure how we develop AI - there is no way to make this happen in academia instead. &lt;/p&gt;

&lt;p&gt;So the best possible thing that I can think of is, at the very least, to put laws in place that allow public visibility into all AI developments at companies at more or less real time. Because the US is the most likely place for progress to happen, it seems to be the most important one to target for this. This would probably need a combination of an obligation to publicly document all AI research in a timely manner (e.g. quarterly); hefty fines for non-compliance; and whistleblower protection for employees who sound the alarm bell if the content of reports deviates from reality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Pablo Picasso - Las Meninas.jpg&quot; alt=&quot;Pablo Picasso, Las Meninas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Staring into an AI research project - Pablo Picasso, Las Meninas&lt;/p&gt;

&lt;p&gt;Getting the details right of this will be far from trivial - what constitutes a “research project” that requires reporting? How can you get reports at a fine enough granularity that actually tell you something interesting? You wouldn’t want all or the research activity a company does to be lumped together as one project of “progressing AI”. Writing good laws is hard, let alone at a rapidly developing technological frontier like this. Maybe biohazard regulation could be a guiding light and maybe “artificial intelligence hazard” might be a good umbrella term for this kind of regulation.&lt;/p&gt;

&lt;p&gt;Having such visibility legislation in place will by no means make sure that the race towards ever more powerful AI will lead to equitable outcomes - but it would at least help the public understand what is going on so that we can attempt to make changes to the rules of the game if things get hot.&lt;/p&gt;

&lt;p&gt;OpenAI has &lt;a href=&quot;https://twitter.com/jjvincent/status/1636065237500588033&quot;&gt;recently changed course on these matters&lt;/a&gt; - in the past they argued that sharing information was important as part of „being a good citizen“ in the AI space. Recently they have started to argue that it would be dangerous to make details of their training data or of their models public as others might be able to use these for nefarious purposes. This of course coincides conveniently with a breakpoint in their ability to commercialize their technology via subscriptions or to license their technology to other companies. &lt;/p&gt;

&lt;p&gt;Whether companies should be incentivised to reveal technical details of their systems or their training data is a separate question - but I think it is crucial that we force them to reveal some meta information of all their R&amp;amp;D projects. This should include information on how much compute and data they are investing in those programs and what their purpose and aims are. I think a world in which all US tech companies were forced to reveal such information once a quarter would be one that stands a better chance of avoiding bad outcomes in AI. &lt;/p&gt;

&lt;p&gt;I’m curious to hear what others think. Let me know your thoughts via email or on &lt;a href=&quot;https://twitter.com/danyx23&quot;&gt;twitter&lt;/a&gt; and if you enjoy this substack please share it with others - thanks!&lt;/p&gt;

&lt;p&gt;(Note: this post was published &lt;a href=&quot;https://aihorizon.substack.com/p/will-we-know-if-a-company-is-close&quot;&gt;also on my Substack&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Mar 2023 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2023/03/26/will-we-know-if-a-company-is-close-to-transformative-ai.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2023/03/26/will-we-know-if-a-company-is-close-to-transformative-ai.html</guid>
        
        
      </item>
    
      <item>
        <title>I joined Our World In Data as Principal Software Engineer</title>
        <description>&lt;p&gt;I just joined the fantastic team at &lt;a href=&quot;https://ourworldindata.org/&quot;&gt;Our World In Data&lt;/a&gt;! At Our World In Data we build a website with the same name that compiles data and research on the most pressing global problems. Go check it out if you don’t know it yet!&lt;/p&gt;
</description>
        <pubDate>Mon, 03 May 2021 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2021/05/03/joined-our-world-in-data.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2021/05/03/joined-our-world-in-data.html</guid>
        
        
      </item>
    
      <item>
        <title>What I like about F# is online on youtube</title>
        <description>&lt;p&gt;This Tuesday I gave a talk at the fantastic (currently zoom only) &lt;a href=&quot;https://www.meetup.com/Berlin-Functional-Programming-Group&quot;&gt;Berlin Functional Programming Meetup&lt;/a&gt; about F#. I gave a brief introduction to the language, then showed how to download and analyze some historic weather data and serve this up as a small SPA web app. Below you can play the recording - have a look and &lt;a href=&quot;https://twitter.com/intent/tweet?screen_name=DanyX23&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;let me know&lt;/a&gt; if you have any feedback.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/0CMnvI8ArRg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;!--more--&gt;
</description>
        <pubDate>Thu, 04 Mar 2021 00:00:00 -0600</pubDate>
        <link>https://danielbachler.de/2021/03/04/what-i-like-about-fsharp-is-online-on-youtube.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2021/03/04/what-i-like-about-fsharp-is-online-on-youtube.html</guid>
        
        
      </item>
    
      <item>
        <title>What I wish I knew when learning F#</title>
        <description>&lt;p&gt;I’ve used F# a lot in the last 3 years and for quite some time I wanted to collect a few good starting points to venture into F# in one place. I also wanted to collect some of those random things that I felt weren’t easily available anywhere because they fall through the cracks of the official language reference and library documentation. While writing this post I had two inspirations in my mind: Hillel Wayne’s post &lt;a href=&quot;https://buttondown.email/hillelwayne/archive/2269df89-b3fc-406f-ac2e-9d7464879ba3&quot;&gt;“Why Python is my Favorite Language”&lt;/a&gt; and Stephan Diel’s &lt;a href=&quot;https://dev.stephendiehl.com/hask/&quot;&gt;“What I Wish I Knew When Learning Haskell”&lt;/a&gt;. In the end I wound up collecting a high level view of the upsides and downsides of F#; a section about how to run/edit/debug F# code; and then a collection of small pieces of information that I think can easily confuse newcomers.&lt;/p&gt;

&lt;p&gt;This will be a living document that I will try to updated regularly. It is also my personal perspective only - I may get things wrong or not know about some aspects or misrepresent certain projects. If you think I should change something or if you are a beginner and have run into obstacles that you think are worth adding then please let me know.&lt;/p&gt;

&lt;p&gt;I’ll sacrifice some accuracy on the history of the language, details of the runtime etc for the sake of brevity &lt;label for=&quot;sn-history&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-history&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;If you are interested in a detailed history of F# then you will enjoy the document &lt;a href=&quot;https://fsharp.org/history/hopl-final/hopl-fsharp.pdf&quot;&gt;the early history of the F# language&lt;/a&gt; &lt;/span&gt; - I want to get a newcomer started quickly, not write an accurate history of the development of the language.&lt;/p&gt;

&lt;p&gt;Ok, with all that out of the way, let’s dive in. I’ll roughly follow Hillel’s list of questions from &lt;a href=&quot;https://buttondown.email/hillelwayne/archive/2269df89-b3fc-406f-ac2e-9d7464879ba3&quot;&gt;“Why Python is my Favorite Language”&lt;/a&gt; as I think they capture many essential points very well when you look to working with a new language as an outsider.&lt;/p&gt;

&lt;h2 id=&quot;why-would-i-want-to-use-f&quot;&gt;Why would I want to use F#?&lt;/h2&gt;

&lt;p&gt;I like F# and could write a whole blog post just with reasons to use the language. My personal elevator pitch is something like this: F# is great general purpose language for writing code that prevents several kinds of bugs thanks to it’s great type system. It allows teams to stay productive as the code base grows because it emphasizes using functions and immutable data. It is a pragmatic language that steers you towards good design but provides all sorts of escape hatches if you need to optimize for performance etc. It can be used in a wide range of applications, from web frontends to backends to mobile applications to data science notebooks.&lt;/p&gt;

&lt;p&gt;I want to go into a bit more detail than that though, so below I’ll highlight a few of the main arguments in favour of F#.&lt;/p&gt;

&lt;p&gt;F# has a &lt;strong&gt;great type system&lt;/strong&gt; with &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;sum types&lt;/a&gt; (called Discriminated Unions in F#) and exhaustiveness checking that are notably missing from many other programming languages. This allows you to model data more accurately than with classes and simple enums alone and thus lets the compiler help you avoid a lot of common bugs. &lt;label for=&quot;sn-sum-types&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-sum-types&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;If you have never encountered them: think of them as enums on steroids because each case can have additional payload that can be different from case to case. When you use such a value you have to pattern match and then tell the compiler what do in each case and there you have the payload available. &lt;/span&gt; At the same time, because of full type inference the compiler can figure out the types of most values and functions which allows users to omit them which leads to less visual clutter than in C# or Java.&lt;/p&gt;

&lt;p&gt;The main compilation target, the .NET Core Framework, is a &lt;strong&gt;rich runtime with great performance&lt;/strong&gt; characteristics that runs on all major platforms. It used to be the case that Windows was the main platform and Linux/OSX where only supported by third party implementations but with .NET Core that is the main incarnation now this is no longer the case and Microsoft officially supports several OSs and processor architectures.&lt;/p&gt;

&lt;p&gt;It can leverage the &lt;strong&gt;huge .NET ecosystem&lt;/strong&gt; with libraries for many tasks e.g. a highly tuned HTTP server implementation. Because .NET is very commonly used in large enterprises, companies that invest in client libraries for multiple programming languages tend to have an implementation for .NET/C# (e.g. Google Cloud, AWS, …).&lt;/p&gt;

&lt;p&gt;It is a “functional first” programming language that tries to guide you towards using &lt;strong&gt;functions and immutable data structures&lt;/strong&gt; as your tool of choice. At the same time it is very pragmatic and allows you to write and consume object oriented code or libraries, use mutability for performance reasons etc. (F# is very close to &lt;a href=&quot;https://ocaml.org/&quot;&gt;OCaml&lt;/a&gt; and shares this approach with it)&lt;/p&gt;

&lt;p&gt;The functional first approach and the support for Sum types and de-emphasis of Object Oriented code push you to architectural styles that IMHO allow for &lt;strong&gt;higher code complexity at lower cost&lt;/strong&gt; and make it easier to deal with change requests. I say this as someone who has spent 13 years of their professional life as an OO proponent. Instead of worrying about questions of Is-A vs Has-A and the encapsulation of mutable state you work with functions and immutable data that compose and scale much better. This makes it great for writing complex software that can always be refactored and extended quickly.&lt;/p&gt;

&lt;p&gt;It has a &lt;strong&gt;scripting mode&lt;/strong&gt; where compilation is done on the fly. This makes it look and feel very similar to python but you still get type checking and much better performance. Tools like the &lt;a href=&quot;https://fake.build/&quot;&gt;FAKE build tool&lt;/a&gt; use this so the same language you use for writing your solution can also be used to automate building, publishing and deployment.&lt;/p&gt;

&lt;p&gt;F# has a very powerful mechanism to create ergonomic workflow DSLs called &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions&quot;&gt;Computation Expressions&lt;/a&gt;. &lt;label for=&quot;sn-computation-expression&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-computation-expression&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Computation Expressions are similar to Haskells do notation but with interesting additions. In Haskell, the do syntactic sugar applies mainly to Monads and Applicatives. In a language like F# that has loops etc. it makes sense to allow more constructs to be customized in a similar way. &lt;/span&gt; If you have every used async/await in another programming language then you have seen a special case of a construct that can be expressed in a more general way with Computation Expressions (i.e. contrary to C#, Python etc. the async syntactic sugar in F# is not specially built for the async feature; instead, F# Computation Expressions let you write the implementation of the async syntactic sugar as normal user code). This let’s you write code that concentrates on specific problems while extracting the wiring (e.g. how errors are propagated) into the implementation of the computation expression.&lt;/p&gt;

&lt;p&gt;It has a lot of powerful unusual features that are just fun to explore and often very useful - e.g. built in &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/units-of-measure&quot;&gt;units of measure&lt;/a&gt; that track dimensions correctly across arithmetic operations and prevent errors that arise from confusing different physical units in code; or &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/&quot;&gt;type providers&lt;/a&gt; that generate types from example data for you at compile time or within the IDE as you type.&lt;/p&gt;

&lt;p&gt;It is also one of the few languages that can be used for both the (performant) implementation of &lt;strong&gt;server side code and client side Javascript&lt;/strong&gt; with full access to the Javascript ecosystem. This allows sharing of implementation and types and makes teams much more productive in this common scenario.&lt;/p&gt;

&lt;p&gt;Finally, it has a small but very friendly and &lt;strong&gt;helpful community&lt;/strong&gt; that is very pragmatic. While you will find people who enjoy thinking about abstractions in software in themselves and how they relate to category theory, most people in the F# community just want to use their nice favorite language to build useful things.&lt;/p&gt;

&lt;h2 id=&quot;why-would-i-not-want-to-use-f&quot;&gt;Why would I not want to use F#?&lt;/h2&gt;

&lt;p&gt;I never trust articles that never mention any down sides - so here are some that I see for F#:&lt;/p&gt;

&lt;p&gt;Both the .NET and the Javascript compilation targets (see below for more) are garbage collected. There is some support for memory pinning etc for FFI purposes but in general if you &lt;strong&gt;can’t afford GC&lt;/strong&gt; F# is not for you.&lt;/p&gt;

&lt;p&gt;The .NET &lt;strong&gt;ecosystem is dominated by C#&lt;/strong&gt;, a language with exceptions, nulls and a heavy lean on classes with inheritance hierarchies as the main design tool. F# tries to favor Result values over Exceptions, makes it hard to create types that have null as a possible value and prefers functions, interfaces and simple algebraic data types over classes and inheritance. But because of C#’s dominance you do have to understand C# well enough to consume libraries and to translate some concepts.&lt;/p&gt;

&lt;p&gt;If you mainly do &lt;strong&gt;machine learning&lt;/strong&gt; then the library and ecosystem in Python is much more developed than that on .NET.&lt;/p&gt;

&lt;p&gt;It has relatively &lt;strong&gt;weak metaprogramming capabilities&lt;/strong&gt; and it doesn’t have higher kinded types. This means that there is a ceiling to the abstractions and terse-ness of your code vs something like Haskell. In practical terms this means e.g. that something like Haskell’s &lt;a href=&quot;https://hackage.haskell.org/package/aeson-1.5.4.1/docs/Data-Aeson.html&quot;&gt;Aeson library&lt;/a&gt; that generates JSON serialization from types at compile time, or Rust’s &lt;a href=&quot;https://serde.rs/&quot;&gt;Serde library&lt;/a&gt; can’t be built in F#. The dotnet framework does have runtime reflection so such features can be done by runtime type introspection but this comes at a performance penalty. F# has type providers that can help somewhat in this problem space but they are limited in what they can take as inputs (e.g. no F# types) and are somewhat fragile in how they interface with different compiler versions. If you know you’ll need strong metaprogramming capabilities then other languages might be a better choice.&lt;/p&gt;

&lt;p&gt;If you need to hire a large number of engineers who know F# in a particular &lt;strong&gt;geographical location in a short period of time&lt;/strong&gt; then this can be difficult. Because F# is a relatively niche language, both the job market and the applicant pool are comparatively small. As with many other functional programming languages though, both the jobs and the applicants you do find are usually very interesting and if you have some time F# is relatively quick to learn if you know a bit of functional programming.&lt;/p&gt;

&lt;p&gt;If you work a lot with &lt;strong&gt;copy and paste from stackoverflow&lt;/strong&gt; (I don’t want to diss this, there are many people who work on software for whom this is a very legitimate way). The number of examples for “how do I” for something like Python is a lot larger than that for F#; same with learning resources in general, although what exists is often very good - e.g. Scott Wlaschin’s &lt;a href=&quot;https://fsharpforfunandprofit.com/&quot;&gt;fsharp for fun and profit&lt;/a&gt; is one of the best functional programming resources I know across all functional programming languages.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;documentation&lt;/strong&gt; story in the F# and wider .NET ecosystem is not great, at least when compared with languages like Rust that provide tools for this and have a culture around high level documentation efforts. It is quite a bit better than the documentation level in languages like Haskell though.&lt;/p&gt;

&lt;p&gt;There is also a section below on common gotchas in F# that you may want to consider as possible counter arguments for F# as well.&lt;/p&gt;

&lt;h2 id=&quot;where-can-i-run-f-what-are-the-prerequisites&quot;&gt;Where can I run F#? What are the prerequisites?&lt;/h2&gt;

&lt;p&gt;F# has three main compilation targets: The Windows only .NET Framework that exists since 2001; the modern, cross platform .NET Core Framework (also by Microsoft, sort of replacing Mono on OSX and *nix and being the new incarnation of .NET on Windows as well); and Javascript via the &lt;a href=&quot;https://fable.io/&quot;&gt;Fable Compiler&lt;/a&gt; project, which can then run in the Browser, on Node, on AWS Lambda etc..&lt;/p&gt;

&lt;p&gt;The old .NET Framework comes pre-installed with Windows and only runs there. The current version as of 2020 is 4.8 and versions used to be updated occasionally with OS updates. The .NET Framework consists of a runtime part (CLR, Common Language Runtime) that includes a VM that JIT compiles Bytecode and runs it (much like the JVM in the Java ecosystem), and an optional SDK that includes the C# and F# compiler etc for development.&lt;/p&gt;

&lt;p&gt;The new &lt;a href=&quot;https://dotnet.microsoft.com/&quot;&gt;.NET Core Framework&lt;/a&gt; is similar and in many parts largely API compatible to the old .NET Framework but was built as a new open source, cross platform implementation of the non-Windows specific parts (i.e. what is missing from .NET Core is Windows GUI support and a few other parts of the standard library that don’t make much sense in a cross platform context). You need to install the runtime (CLR, see above) for the system you are running which includes the VM implementation. There are packages available for most major operating systems and processor architectures. Just like above, there is then a separate SDK with the compilers etc. As of late 2020, installing the &lt;a href=&quot;https://dotnet.microsoft.com/download&quot;&gt;.NET Core framework version 5&lt;/a&gt; would be my recommended target framework if you don’t know what to use.&lt;/p&gt;

&lt;p&gt;If you want to target Javascript you need a fork of the main F# compiler called &lt;a href=&quot;https://fable.io/&quot;&gt;Fable&lt;/a&gt;. This is using the same codebase as the official F# compiler that is shipped with the two SDKs above but has an alternative backend for code generation that instead of .NET Bytecode creates a Babel AST that is then serialized to Javascript using Babel (Fable 1+2) or Javascript directly (Fable 3). There is a relatively straightforward FFI to tell the F# compiler about functions and “types” of objects in Javascript so you can freely use any third party Javascript libraries. Fable comes with a definition of much of the Browser and Node APIs so you can use them directly when writing F# that targets Javascript and a significant part of the .NET Class library has been implemented with Javascript to allow idiomatic F# code to run in this alternate runtime environment (so you can e.g. use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Console.WriteLine(&quot;Hello&quot;)&lt;/code&gt; from the .NET base class system instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fable.Import.Browser.console.log(&quot;Hello&quot;)&lt;/code&gt;). Fable works surprisingly well overall. There are a few gotchas because the F# compiler is built on the assumption of certain .NET base types (e.g. &lt;a href=&quot;https://fable.io/docs/dotnet/numbers.html&quot;&gt;different truncation behaviour&lt;/a&gt; for what F# thinks are 32 bit integers as Javascript only has one number type other than the upcoming BigInt) - but it turns out that this is a very powerful and straightforward way of creating Javascript solutions.&lt;/p&gt;

&lt;h2 id=&quot;how-am-i-supposed-to-be-writing-this&quot;&gt;How am I supposed to be writing this?&lt;/h2&gt;

&lt;p&gt;If you just want to get a quick feel for the language then the &lt;a href=&quot;https://try.fsharp.org/&quot;&gt;Try F# website&lt;/a&gt; is a good starting point that let’s you play with the language in the browser.&lt;/p&gt;

&lt;p&gt;To actually work with your own codebases I know of five reasonably comfortable ways to develop F#: &lt;a href=&quot;https://visualstudio.microsoft.com/&quot;&gt;Visual Studio&lt;/a&gt; (both for Windows and OSX), &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href=&quot;https://ionide.io/&quot;&gt;Ionide plugin&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/rider/&quot;&gt;Jetbrains Rider&lt;/a&gt; and finally the &lt;a href=&quot;https://github.com/ionide/Ionide-vim&quot;&gt;vim&lt;/a&gt; and &lt;a href=&quot;https://github.com/fsharp/emacs-fsharp-mode&quot;&gt;emacs&lt;/a&gt; plugins that use the LSP protocol to talk to FsAutocomplete (the same backend that powers Ionide.). Myself and most of my colleages use VS Code with Ionide on Windows or OSX which usually work very well.&lt;/p&gt;

&lt;p&gt;Unless you are familiar with and really want to use the old Visual Studio I would recommend downloading the dotnet core 5 sdk for your platform, getting an editor (e.g. VS Code + Ionide) and then creating a new folder and running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet new console -lang fsharp&lt;/code&gt; to get a scaffold for a console app and start playing with it there (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; builds and immediately runs the project).&lt;/p&gt;

&lt;h2 id=&quot;debugging-and-the-repl&quot;&gt;Debugging and the REPL&lt;/h2&gt;

&lt;p&gt;VS, VS Code and Rider all offer integrated debugging (step through, see values, break on exception etc). Call stacks in code using computation expressions can be a bit hard to parse because the wiring of the Bind implementation is interwoven with your own code but for most needs this is a pretty nice debugging experience; definitely better than with a lot of other statically typed functional programming languages.&lt;/p&gt;

&lt;p&gt;There is a repl (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet fsi&lt;/code&gt; when you are on dotnet core 3+) and there is  support for loading files with their dependencies into it or to use libraries in scripts and evaluate parts of that in the interactive repl of your editor. This experience is not as great as with Lisps but works ok (with .NET Core Version 5 the story for referencing third party packages got a lot better so if you tried the repl experience before and were disappointed it is worth checking it out again).&lt;/p&gt;

&lt;h2 id=&quot;the-standard-library&quot;&gt;The standard library&lt;/h2&gt;

&lt;p&gt;The .NET Framework has a pretty extensive standard library that allows you to do a lot of everyday stuff (though not as extensive as python’s). Much of it was originally designed around 2000 with primarily the object oriented C# language in mind, so a lot of the standard library that you use (everything in the System. namespace) has a very OO feel. Over time various convenience features were added (e.g. for reading the content of a text file in one call) but some things are still surprising - e.g. until the DotNet core 3 version that came out late last year you had to use a third party library for (de)serializing Json (Newtonsoft.JSON was the go-to solution) while XML has been in the standard library since the beginning.&lt;/p&gt;

&lt;p&gt;The standard library follows the idea to create a rough taxonomy of functionality by namespace that branches into more specific areas and then uses mostly classes that either have a few static methods or (usually) are instantiated and then you operate on them using methods. E.g. File related classes are grouped in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.IO&lt;/code&gt; namespace, collection classes are in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Collections&lt;/code&gt; etc.. (see below on some gotchas about the collection classes in the .NET standard library and F#’s own collections).&lt;/p&gt;

&lt;p&gt;When using Fable (the F# compiler that outputs Javascript), some things around the standard library and packaging are a bit more involved - more on that below in the Fable section.&lt;/p&gt;

&lt;p&gt;You can find additional libraries on &lt;a href=&quot;https://www.nuget.org/&quot;&gt;nuget.org&lt;/a&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet add package&lt;/code&gt; to add them to your project and use them.&lt;/p&gt;

&lt;h2 id=&quot;code-formatting&quot;&gt;Code formatting&lt;/h2&gt;

&lt;p&gt;Gofmt popularized the idea of using tools to format source code and many languages have since created similar tools. For F# the tool in question is &lt;a href=&quot;https://github.com/fsprojects/fantomas&quot;&gt;Fantomas&lt;/a&gt;. It is included in FsAutocomplete, the backend for Ionide and so if you use VSCode and Ionide you don’t need to install it separately. The Fanotmas authors have created an &lt;a href=&quot;https://fsprojects.github.io/fantomas-tools/#/fantomas/preview&quot;&gt;online version&lt;/a&gt; of their tool that you can also use to inspect the F# AST and how it is turned into source code which is useful for reporting issues with the formatting.&lt;/p&gt;

&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;/h2&gt;

&lt;p&gt;The packaging ecosystem story for both the old .NET Framework and .NET core is to use &lt;a href=&quot;https://www.nuget.org/&quot;&gt;Nuget packages&lt;/a&gt;. These are just zipped archives that contain some metadata and dependency information and then the compiled artifacts called assemblies that contain the library code. Assemblies contain the compiled bytecode to be executed and a lot of metadata on the types so that types can be extended and consumed across language borders between different programming languages (the main ones are C# which is what most stuff is written in, F#, VB.NET, “managed C++” and then some other fringe languages like &lt;a href=&quot;http://www.nemerle.org/About&quot;&gt;Nemerle&lt;/a&gt;). &lt;label for=&quot;sn-fun-fact&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-fun-fact&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Fun fact - they have the file extension .dll and are actually win32 dlls that a windows 95 era tool would at least understand to some degree &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The nuget packaging story is a bit flawed in that it doesn’t use lock files by default and doesn’t differentiate transitive dependencies. I thus strongly recommend using the alternative &lt;a href=&quot;https://fsprojects.github.io/Paket/&quot;&gt;paket package manager&lt;/a&gt; for larger projects that lets you use nuget packages in a principled way (and is written in F# 😉). For smaller projects the default nuget is usually fine.&lt;/p&gt;

&lt;p&gt;To find libraries you can search directly on nuget.org. If you google for stuff then it often helps to search in this order for “yourtopic fsharp” “yourtopic c#” or “yourtopic dotnet”. Idiomatic F# libraries are often a little nicer to use from F# (e.g. because the use immutable records instead of mutable classes) but you can use any dotnet library from f#. Try to use F# libraries first and otherwise sort by popularity as an initial heuristic when choosing libraries for tasks if multiple libraries exist. If you find F# type providers &lt;label for=&quot;sn-type-providers&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-type-providers&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;strong&gt;Type providers&lt;/strong&gt;  are a metaprogramming facility that operates sort of like a compiler plugin that looks at sample data to generate types. E.g. there is a type provider for CSV files that takes the path to a csv file alongside your source code which it then reads (at compile time or during the editor session) and generates a row type from the example csv file without you having to spell out the F# code for the type &lt;/span&gt; then they can be worth a try if you want to get somewhere quickly but they may be a maintenance burden in the long run for more complex projects.&lt;/p&gt;

&lt;p&gt;Third party libraries don’t have a consistent documentation story unfortunately, so you usually go to the project site and follow the project readme to whatever official documentation the library has. Source code in C# and F# can be annotated with special comments (line comments with three instead of two slashes above the entity) that then get compiled into xml files that accompany assemblies - these files are used by editors to show help text on functions and classes on hover in your editor.&lt;/p&gt;

&lt;p&gt;Publishing a library is pretty straightforward - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet pack&lt;/code&gt; packs the library into a nuget archive and after creating an account and &lt;a href=&quot;https://docs.microsoft.com/en-us/nuget/nuget-org/publish-a-package&quot;&gt;setting up the api token&lt;/a&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet publish&lt;/code&gt; will push it to nuget. If you are using the Paket package manager then it gives you a similar command but it will handle dependency ranges in a less manual way. &lt;a href=&quot;https://fake.build/&quot;&gt;FAKE build scripts&lt;/a&gt; can automate building, testing and publishing of libraries all while using the full power of F# for writing your build scripts. Github actions now comes preinstalled with .NET Core so you can do all of this using Github Actions easily.&lt;/p&gt;

&lt;p&gt;If you need to understand a third party NuGet package (e.g. because the documentation is lacking which for some smaller libraries in F# land can definitely be the case), then you have several options. If the project is open source then the easiest is usually to browse the source code there. Some packages use SourceLink, a way to upload debug symbols for libraries so that users of the library can use them by stepping into their source when debugging - not all editors can make use of them though. If the source code is not easily available then some editors come with .NET Bytecode decompilers (e.g. Visual Studio and Jetbrains Rider) and there also exist some standalone tools for that though most are Windows only (&lt;a href=&quot;https://github.com/icsharpcode/AvaloniaILSpy&quot;&gt;AvaloniaSpy&lt;/a&gt; is the main cross platform one I know of). I don’t know any tools that decompile to F# so if the library you are decompiling is not open source but authored in F# the resulting decompiled C# will look a bit odd - but that is a rare case since most .NET libraries are written in C# and the most common F# libraries are open source.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;In F# the preferred library for writing tests is &lt;a href=&quot;https://github.com/haf/expecto&quot;&gt;Expecto&lt;/a&gt;. It allows you to do tons of interesting tests including performance tests between implementations with proper statistical tests. You can add &lt;a href=&quot;https://github.com/fscheck/FsCheck&quot;&gt;FSCheck&lt;/a&gt; for property based testing, &lt;label for=&quot;sn-property-based-testing&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-property-based-testing&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;strong&gt;Property Based Testing&lt;/strong&gt; is a technique to automate test case generation in an intelligent way. Instead of single example testing which is what you do in unit testing, in property based testing you describe statements that you expect to be true (e.g. changing the order of this mathematical operation should not change the result; or serializing and deserializing a value of this type should lead to an identical value) and let the test suite create random values to test your assertions with &lt;/span&gt; which I recommend doing - e.g. to test if custom deserializer/serializer pairs lead to identical values.&lt;/p&gt;

&lt;p&gt;Expecto is usually run by creating a standalone console app from a template &lt;label for=&quot;sn-expecto&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-expecto&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet new -i Expecto.Template::*&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet new expecto -n PROJECT_NAME -o FOLDER_NAME*&lt;/code&gt; &lt;/span&gt;. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet watch run&lt;/code&gt; it can rerun tests on every file change.&lt;/p&gt;

&lt;h2 id=&quot;fable-and-the-safe-stack&quot;&gt;Fable and the SAFE stack&lt;/h2&gt;

&lt;p&gt;Fable is a standalone distribution of the F# compiler that uses the same front-end as the official F# compiler but has an alternative backend that generates Javascript. There are a few relatively exotic F# constructs that are not or only partly supported (e.g. Reflection is only partly supported). There are some differences because of runtime has different semantics and implementations (e.g. float truncation behaviour can differ, the Regex engines have slightly different capabilities, …).&lt;/p&gt;

&lt;p&gt;Fable 3 came out in late 2020 and came with a few big changes. Before version 3 Fable used &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; to output Javascript by interacting with Babel and building a Babel AST. This was useful in 2015 when Javascript was evolving rapidly and creating JS code compatible with different execution targets was an appealing feature that came for free with Babel. The distribution of version 1 and 2 was done as an npm project and most setups used webpack to invoke Fable as a processor for .fs files.&lt;/p&gt;

&lt;p&gt;With Fable 3 both of this changed and Javascript is now generated directly. Fable 3 is also distributed as a dotnet tool (i.e. executed via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet fable&lt;/code&gt; ) and a plugin system was added that allows library authors to automate creation of boilerplate code (e.g. when creating components for UI libraries).&lt;/p&gt;

&lt;p&gt;All of the above for both Version 1, 2 and 3 mean that you can mostly write normal F# code that is then turned into relatively normal Javascript. It works pretty well and at my company we wrote several full web frontends with this approach (using React for rendering and the &lt;a href=&quot;https://elmish.github.io/elmish/&quot;&gt;F# Elmish library&lt;/a&gt; for state management). You do have to have some understanding of Javascript though when you want to use third party Javascript libraries. Here you basically tell F# about types of functions and the objects and it will trust you to have translated these concepts correctly. Some of the .NET standard library has been re-implemented in Javascript so that some reasonable subset of normal library calls work but unfortunately there is no compile time signal about which parts are translated and which are missing (i.e. when you use a seldom used member function on e.g. the Regex type that has not been re-implemented for the Javascript code it will crash at runtime with no warning at compile time).&lt;/p&gt;

&lt;p&gt;I feel Fable is a very pragmatic solution that enables the very interesting possibility of writing web UIs in F#, even if it is no silver bullet. When working in a small team it’s worth a lot if all parts of the code base (backend, frontend, build scripts) are written in one language. Even if different people have different specializations, everyone can fix small issues in all parts of the code base and so using F# in the entire stack is pretty compelling IMHO.&lt;/p&gt;

&lt;p&gt;If you are interested in Fable for writing frontend application then &lt;a href=&quot;https://zaid-ajaj.github.io/the-elmish-book/#/&quot;&gt;the Elmish Book&lt;/a&gt; is a great resource that explains all the moving pieces to create complex web apps using Fable.&lt;/p&gt;

&lt;p&gt;A list of Fable libraries is maintained at the &lt;a href=&quot;https://github.com/kunjee17/awesome-fable&quot;&gt;Awesome Fable&lt;/a&gt; repository.&lt;/p&gt;

&lt;h3 id=&quot;the-safe-stack&quot;&gt;The SAFE Stack&lt;/h3&gt;

&lt;p&gt;Worth a special mention is the &lt;a href=&quot;https://safe-stack.github.io/&quot;&gt;SAFE stack&lt;/a&gt;. This is a preconfigured template that sets up F# on the backend (using ASP.NET core via either the straight forward &lt;a href=&quot;https://github.com/giraffe-fsharp/Giraffe&quot;&gt;Giraffe library&lt;/a&gt; or the more opinionated &lt;a href=&quot;https://saturnframework.org/&quot;&gt;Saturn library&lt;/a&gt;), and on the frontend (using Fable 2 as of late 2020). The SAFE template can either be used in a barebones configuration or in a more opinionated, fully fledged version that comes with frontend and backend testing libraries, Bulma preselected as a style framework, a choice of type safe automated communication between frontend and backend and so forth.&lt;/p&gt;

&lt;p&gt;If you want to explore the SAFE stack then head over to the &lt;a href=&quot;https://safe-stack.github.io/docs/quickstart/&quot;&gt;quickstart&lt;/a&gt; to learn about the requirements and how to set up a project using the template.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-do-common-stuff-how-do-i-find-out-how-to-do-things&quot;&gt;How do I do common stuff? How do I find out how to do things?&lt;/h2&gt;

&lt;p&gt;If you need to find things in the standard library then the &lt;a href=&quot;https://docs.microsoft.com/en-in/dotnet/api/&quot;&gt;microsoft dotnet framework help&lt;/a&gt; is pretty good. It can filter by framework version etc..&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-in/dotnet/fsharp/language-reference/&quot;&gt;F-Sharp language overview&lt;/a&gt; is very good to get an idea of all the features in the language. As far as I know there is no offline version of the docs although Visual Studio did have some windows compiled help files at some point so something like this might still exist. &lt;a href=&quot;https://fsharpforfunandprofit.com/&quot;&gt;Fsharp for fun and profit&lt;/a&gt; is a great learning resource to learn about F# concepts.&lt;/p&gt;

&lt;p&gt;Since you probably know some other programming language already the &lt;a href=&quot;http://rosettacode.org/wiki/Category:F_Sharp&quot;&gt;Rosetta Code project&lt;/a&gt; can be a good starting point to quickly learn how to do common things in F#.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/fsprojects/awesome-fsharp&quot;&gt;Awesome F#&lt;/a&gt; list is a great overview of good F# libraries for various tasks.&lt;/p&gt;

&lt;p&gt;Every December there is also the tradition of the &lt;a href=&quot;https://sergeytihon.com/2020/10/22/f-advent-calendar-in-english-2020/&quot;&gt;F# Advent Calendar&lt;/a&gt; where various members of the community write a blog post about something F# related that interests them. It’s a good way to discover interesting uses of F#.&lt;/p&gt;

&lt;h2 id=&quot;community&quot;&gt;Community&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://fsharp.org/&quot;&gt;F# Foundation website&lt;/a&gt; is a good starting point to learn more about the various parts of the language etc. The F# Foundation manages various web properties and among others the fsharp github organisation.&lt;/p&gt;

&lt;p&gt;Don Syme &lt;a href=&quot;https://twitter.com/dsyme&quot;&gt;@dsyme&lt;/a&gt; is the primary creator of the language and has worked on it since the precursors of F# in the late 90ies at Microsoft (F# grew out of the desire to have an ML language for the .NET Platform that was not yet released at the time - you can find out more about the history &lt;a href=&quot;https://fsharp.org/history/hopl-final/hopl-fsharp.pdf&quot;&gt;here&lt;/a&gt;). At Microsoft there are a few more people working on F# and Visual F# (the Visual Studio integration), the most visible of whom is probably Philip Carter &lt;a href=&quot;https://twitter.com/_cartermp&quot;&gt;@_cartermp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the last 8 years or so the .NET Framework became cross platform with .NET Core and F# could be used outside of Visual Studio and also targeting Javascript. In this development, Krzysztof Cieślak &lt;a href=&quot;https://twitter.com/k_cieslak&quot;&gt;@k_cieslak&lt;/a&gt; was very important as the author of the VS Code extension Ionide, as was Steffen Forkmann &lt;a href=&quot;https://twitter.com/sforkmann&quot;&gt;@sforkmann&lt;/a&gt; who created Paket, a Nuget package manager that uses lockfiles and avoids problems the official Nuget manager has.&lt;/p&gt;

&lt;p&gt;Alfonso Garcia-Caro &lt;a href=&quot;https://twitter.com/alfonsogcnunez&quot;&gt;@alfonsogcnunez&lt;/a&gt; is the creator of Fable, the Javascript backend for F#. Isaac Abraham &lt;a href=&quot;https://twitter.com/isaac_abraham&quot;&gt;@isaac_abraham&lt;/a&gt; is the author of “&lt;a href=&quot;https://www.manning.com/books/get-programming-with-f-sharp&quot;&gt;Get Programming with F#&lt;/a&gt;” which I heard good things about and one of the initiators of the SAFE stack (the preconfigured template for F# on .NET Core on the server and F# using Fable on the Frontend for a full stack F# experience).&lt;/p&gt;

&lt;p&gt;Scott Wlaschin &lt;a href=&quot;https://twitter.com/ScottWlaschin&quot;&gt;@ScottWlaschin&lt;/a&gt; is the author of the wonderful F# learning resource &lt;a href=&quot;https://fsharpforfunandprofit.com/&quot;&gt;FSharpForFunAndProfit&lt;/a&gt; and the very nice general Domain Driven Design book “&lt;a href=&quot;https://pragprog.com/titles/swdddf/domain-modeling-made-functional/&quot;&gt;Domain Modeling Made Functional&lt;/a&gt;”.&lt;/p&gt;

&lt;p&gt;Sergey Tihon &lt;a href=&quot;https://twitter.com/sergey_tihon&quot;&gt;@sergey_tihon&lt;/a&gt; runs &lt;a href=&quot;https://sergeytihon.com/category/f-weekly/&quot;&gt;F# Weekly&lt;/a&gt;, a great resource to keep up to date with developments in the F# world.&lt;/p&gt;

&lt;p&gt;Zaid Ajaj &lt;a href=&quot;https://twitter.com/zaid_ajaj&quot;&gt;@zaid_ajaj&lt;/a&gt; is the author of numerous projects in the Falbe universe and &lt;a href=&quot;https://zaid-ajaj.github.io/the-elmish-book/#/&quot;&gt;the Elmish Book&lt;/a&gt;, a great, free resource that explains Fable, the Elmish state management library and so forth including tips on creating larger applications and workflows.&lt;/p&gt;

&lt;p&gt;There are of course many more people who work on the F# ecosystem or talk and write about it and I could never list them all - but the above list is a small overview of some key people in the ecosystem that you might want to follow on twitter.&lt;/p&gt;

&lt;p&gt;The F# community is overall very welcoming and friendly. As often with small niche communities that are close to another, more mainstream ecosystem, there is some occasional frustration, e.g. about F# not receiving more support from Microsoft. The reddit channel F# is apparently frequented by a few strange people, so you may prefer to stick to the &lt;a href=&quot;https://fsharp.org/guides/slack/&quot;&gt;F# slack&lt;/a&gt; or &lt;a href=&quot;https://forums.fsharp.org/&quot;&gt;Forums&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;F# is a topic at many FP friendly conferences but there are also two F# specific conferences: &lt;a href=&quot;https://www.openfsharp.org/&quot;&gt;Open FSharp&lt;/a&gt; and &lt;a href=&quot;https://fable.io/fableconf/#home&quot;&gt;Fable Conf&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;common-gotchas&quot;&gt;Common gotchas&lt;/h2&gt;

&lt;p&gt;This is necessarily an incomplete list but here are a few things that can baffle beginners or where it may help to have been warned about differences in philosophy of different corners of the ecosystem. I concentrate here on things that are helpful to know when you start to read tutorials or open source F# code.&lt;/p&gt;

&lt;h3 id=&quot;generic-type-parameters-and-list-option-etc&quot;&gt;Generic type parameters and list, option etc&lt;/h3&gt;

&lt;p&gt;Generics (aka parametric polymorphism) make it possible to write types that are parametrized by one or more other types which is e.g. useful for properly typed collection classes. In C# the syntax is always using angle brackets and uppercase type variables, e.g. List&lt;T&gt;. In F#, generic type variables when declaring new generic types have to use a single quote prefix like so (lower case is more common but both exist): `'a`, so a type definition with a generic type is defined as `List&amp;lt;'T&amp;gt;`. Because of F#s OCaml heritage, there is an alternative syntax for declaring concrete instances of generic types which is a postfix notation like so: `'T list`. The angle bracket syntax is by convention preferred for all but 4 generic types which are `list`, `array`, `ref` and `option`. This is a bit random trivia but it is helpful to know this when reading F# so I wanted to mention it.&lt;/T&gt;&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intOptionA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intOptionB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// same as above&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;/h3&gt;
&lt;p&gt;The .NET Framework version 1 didn’t have generics (parametric polymorphism), so the old collection classes in System.Collections all have the items as untyped objects &lt;label for=&quot;sn-arraylist&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-arraylist&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Collections.ArrayList&lt;/code&gt; which is a dynamically growing vector type that contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;s - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; is the implicit base type of every type in .NET &lt;/span&gt;. Version 2 added generics and so we now have new versions of the collection classes in System.Collections.Generic &lt;label for=&quot;sn-list&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-list&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Collections.Generic.List&amp;lt;T&amp;gt;&lt;/code&gt; in there which is a dynamically growing vector with items of type T that is specified at the instantiation point &lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;To increase the confusion, F# brings it’s own philosophy on collection classes coming from the OCaml tradition and this is in some parts a bit at odds with the .NET standard library naming. The F# collections live in the FSharp.Collections namespace that is open by default and contains the following 5 main collection types: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; (immutable single linked lists) created with the literal syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[ 1; 2; 3]&lt;/code&gt;; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; which are mutable fixed size .NET arrays that are contiguous in memory and created with the literal syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[| 1; 2; 3|]&lt;/code&gt;; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seq&amp;lt;T&amp;gt;&lt;/code&gt; which are lazy iterators (the IEnumerable interface in C#) created with the literal syntax &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq { yield 1; yield 2; yield 3}&lt;/code&gt;; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&amp;lt;T&amp;gt;&lt;/code&gt; which is an immutable set implemented as a sorted tree that has no native literal syntax; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&amp;lt;K, V&amp;gt;&lt;/code&gt; which are immutable key/value maps/dictionaries implemented as ordered trees that have no native literal syntax.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixedArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazySequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;second&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Functions that operate on these collections are in modules of the same name:&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incrementedSequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lazySequence&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incrementedArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fixedArray&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is all fine so far, but what can be a bit confusing when getting started is that if you look for C# code of some library you will never see these collection classes and instead see the main collections from the standard library which are mutable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Collections.Generic.List&amp;lt;T&amp;gt;&lt;/code&gt; which is a mutable, dynamically resized vector; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Collections.Generic.Dictionary&amp;lt;K, V&amp;gt;&lt;/code&gt; which is a mutable Hashmap. So in F# code unless there is an open statement for System.Collections.Generic the type List will mean the F# immutable linked list, but in C# code or if the System.Collections.Generic namespace is opened, List refers to the mutable dynamically resized vector.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Generic&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableVector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutableVector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutableVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add 55 as the last (4tht) element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;async&quot;&gt;Async&lt;/h3&gt;

&lt;p&gt;Async operations are designed to allow efficient use of non-blocking IO, by freeing the thread they are called on to sleep until the operating system is done with the IO and will then resume your thread at the point where it left off. Many methods in both the standard library and third party libraries exist in both an async version and a sync (blocking) version where the latter is a little easier to use for cases where you don’t mind the blocking (but it’s usually good style to use the async version). As an example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CsvFile&lt;/code&gt; class from the commonly used FSharp.Data library has a static method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AsyncLoad(...)&lt;/code&gt; that returns an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Async&amp;lt;CsvFile&amp;gt;&lt;/code&gt;, i.e. the fact that this operation is async is also visible in the return type: in this case an async computation that, when all the non-blocking io is completed, will return a CsvFile instance.&lt;/p&gt;

&lt;p&gt;Async is relatively similar to promises or futures in other languages, but where these are usually started immediately, in F# an async value is not immediately “run” on your behalf. This can seem a bit annoying because you have to manually start it at some point in your code &lt;label for=&quot;sn-async&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-async&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Usually at the top of your console program you somewhere have an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Async.RunSynchronously(myAsyncComputation)&lt;/code&gt; call or in the case of a webserver handler function the framework you use handles this for you and you just supply a function that returns an async value &lt;/span&gt;. But the upside is that it composes much better and you can assemble deeply nested async workflows and then decide if you want to execute and block until done, execute and be notified, execute multiple async values in parallel etc.&lt;/p&gt;

&lt;p&gt;One important gotcha with async in F# is that you should be very careful to only call something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Async.RunSynchronously()&lt;/code&gt; at the very top of your program and instead make the functions leading up to this point all async returning so that they can fulfill their duty as planned - if you use it further down in your callstack you will block the thread at this point and thus forgo the benefit of not blocking an operating system thread just for performing IO. What you should do instead is change the return type of your function to also return an async value (potentially up the call stack to the top) so that users of your function can decide how they want to handle this. Usually you want to use the computation expression for async to make this a bit nicer as discussed in the next paragraph&lt;/p&gt;

&lt;h3 id=&quot;let-and-other-constructs-with-&quot;&gt;let! and other constructs with !&lt;/h3&gt;
&lt;p&gt;This can be confusing when starting to read F# code - there are several constructs that exist both in normal form (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let x = fooFn()&lt;/code&gt; to create named values) and also in a form with an exclamation point aka bang at the end (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let! x = fooFn()&lt;/code&gt;). The exclamation point version is one that can only exist within a computation expression and then it delegates the handling of the sequencing to the computation expression.&lt;/p&gt;

&lt;p&gt;Computation expressions are a nice feature in F# that allows library authors to provide syntactic sugar for working with their types. It’s similar to Haskell’s do notation, but covers the complexities arising from combining this kind of syntactic sugar with loops etc.&lt;/p&gt;

&lt;p&gt;Computation expressions and let! and similar constructs are often used for Async code like so:&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvProcessingFunction&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;The content of testfile is: &quot;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ReadAllTextAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testfile.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AwaitTask&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WriteAllTextAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;newfile.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AwaitTask&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a function that returns an Async of unit (no return value). The body is using the async computation expression. The first let binding to the variable prefix is a normal binding, i.e. the string value on the right hand side is bound to the name on the left hand side. The second let bang binding is a bit different. Here the right hand side is a the ReadAllTextAsync function that returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&amp;lt;string&amp;gt;&lt;/code&gt; which is then passed to Async.AwaitTask to convert to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Async&amp;lt;string&amp;gt;&lt;/code&gt; (see below for Async vs Task).&lt;/p&gt;

&lt;p&gt;What the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let!&lt;/code&gt; is doing now is that it looks up the implementation for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async { }&lt;/code&gt; computation expression and lets it “deal with” the async value. Once this is done the content of the async, in this case a string value is bound to fileContent &lt;label for=&quot;sn-computation-expression&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-computation-expression&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;What is actually happening is that the F# compiler breaks the function into continuation chunks at these points. The Bind function which is one of the two mandatory function of a computation expression implementation then gives the implementation for how to deal with a wrapped value and a continuation function that receives an unwrapped value and returns a wrapped value again &lt;/span&gt;. The result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadAllTextAsync&lt;/code&gt; is a Task so it is piped here to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Async.AwaitTask&lt;/code&gt; which turns it into an Async value. If you were to use a normal let (without the !) then the fileContent would contain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Async&amp;lt;string&amp;gt;&lt;/code&gt; value and we wouldn’t be able to make use of the result of this async computation yet. do! is simalar, the difference being that here no value is bound, just a statement executed for its side effect.&lt;/p&gt;

&lt;h3 id=&quot;async-vs-task&quot;&gt;Async vs Task&lt;/h3&gt;

&lt;p&gt;Async came to F# in version 2.0 around 2010 and a bit later in C# 5 (released in 2012), C# and the standard library came out with a very similar but somewhat different approach to async. Unfortunately the two approaches did not use the same types to represent this in an easily compatible way, even if they represent semantically very similar concepts. I assume that this might have to do with different desired default behaviour. As described above, Async’s are not evaluated until run whereas Tasks in most uses are immediately started (just like Promises and Futures in most languages). Because C# is the dominant language in .NET, most third party libraries you use will return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; value when performing asynchronous computations. One actual benefit that C#’s Task implementation has is that is has a lower overhead. For IO bound operations this doesn’t matter much but when a task is CPU bound and a lot of very short lived Tasks are created then they will generally outperform their Async counter part. When using C# libraries in F# you can easily convert between Task and Async (using Async.AwaitTask as shown above and Async.StartAsTask) and default to Async, but when writing an F# library that should be easily consumable from C# it’s better to use the Task type.&lt;/p&gt;

&lt;h3 id=&quot;semicolons-vs-newlines-in-lists-and-records&quot;&gt;Semicolons vs newlines in lists and records&lt;/h3&gt;

&lt;p&gt;Something that can be confusing for newcomers is that many literals can either be created on the same line with semicolons as separators or using newlines with the correct indentation. The following examples show this:&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecordA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecordB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;FieldB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;anonymous-records&quot;&gt;Anonymous records&lt;/h3&gt;

&lt;p&gt;F# 4.6 introduced anonymous records with a slightly different syntax from normal records. They are useful for cases where a full records seems overkill but a tuple misses some information, for example for color triples or similar. Because of some constraints with regards to the .NET runtime, anonymous records can have some surprising behaviour, e.g. two values with the same shape become the same anonymous record type when declared in the same assembly, but different ones across assembly borders. This means that using anonymous records is fine for returning semi-complex data in a slightly ad-hoc way from functions but they should be promoted to proper records when used in a more public API.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// using a named record&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NamedFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NamedFullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Albert&quot;&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Einstein&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// using an anonymous record that also has a BirthDate&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Roger&quot;&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Penrose&quot;&lt;/span&gt;
       &lt;span class=&quot;nc&quot;&gt;BirthDate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1931&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;modules-vs-member-functions&quot;&gt;Modules vs member functions&lt;/h3&gt;

&lt;p&gt;A slightly confusing issue is that for several common topics like String there exist both member functions that are called on concrete instances but also an F# module for this type. The member function approach is the one that is used in C#, the module approach is additionally available in F#. This means that if you want to get the length of a string you can either do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Teststring&quot;.Length&lt;/code&gt; or you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String.length &quot;Teststring&quot;&lt;/code&gt;. The functionality in this case is identical but some other similar cases also behave a bit differently. Just another little oddity that is good to be aware of.&lt;/p&gt;

&lt;h3 id=&quot;operator-precedence&quot;&gt;Operator precedence&lt;/h3&gt;

&lt;p&gt;If you know other ML family languages then you might be tempted to define some operators for 2-ary functions, e.g. &amp;gt;== for monadic bind, &amp;lt;*&amp;gt; for lifting binary functions etc. This works in theory but is somewhat discouraged and the operator characters and their associated precedence is hardcoded in the language. This means that e.g. overriding addition or multiplication for custom vector types or adding bind is not a problem, but complex operator hierarchies like e.g. in Haskell’s various lens libraries are not really feasible.&lt;/p&gt;

&lt;h3 id=&quot;type-inference-order-and-the-obsession-with-the--pipe-operator&quot;&gt;Type inference order and the obsession with the |&amp;gt; pipe operator&lt;/h3&gt;

&lt;p&gt;The F# compiler works in a single pass which has some consequences that can trip up newcomers. The obvious one is that in an F# project, the order of files matters and inside files the order of declarations is relevant as you can only ever use types, values and functions that have been already declared “further up”. The only exception to this is if you declare a rec module or use mutually recursive type definitions. This may seem really annoying at first but turns out to work very well in practice when navigating larger programs.&lt;/p&gt;

&lt;p&gt;The other, less obvious result of the single pass is that even within expressions the F# compile can sometimes fail type inference for earlier tokens that would become clear when taking later parts into account when e.g. using member functions. Consider this example:&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this form the compiler rejects it. If you rearrange it a bit so that the type parameter for List becomes fixed by putting the string array first and piping it into the rest then it works:&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arguably this reads nicer but it sometimes feels a bit silly to have to do this. Note that this is only necessary because we wanted to access a member in the lambda function - if we had used a normal function then it would have worked:&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-open-keyword-namespaces-and-modules&quot;&gt;The Open keyword, Namespaces and Modules&lt;/h3&gt;

&lt;p&gt;The way imports work in .NET with the open keyword can be confusing, so let me summarize the ways to organize code in F# first. The .NET Framework has the concept of Namespaces to organize code. Namespaces in C# can only contain types, not values or functions. In C# the main way of organizing code is namespaces and classes (which can be static if they only include static functions).&lt;/p&gt;

&lt;p&gt;F# uses a lot of top level values and functions and so F# introduced modules since Namespaces can’t contain them directly. These do not exist as first level entities in .NET bytecode and instead are compiled into static classes. In F#, a single file can contain multiple namespaces which in turn can contain multiple Modules which then can contain values, functions and types. Namespaces can span multiple files, modules etc can’t. The full name of every value, function or type in F# is prefixed by their namespace and module name.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyProject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeField&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OtherRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecordMember&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ModuleA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SomeRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All of this seems straightforward enough but the confusion comes when you use namespaces, modules, values and types with the open keyword. This allows you to omit the namespace/module/class part of a type/function/value, i.e. instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.IO.File&lt;/code&gt; you can first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open System.IO&lt;/code&gt; and then just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File&lt;/code&gt; to mean the same type.&lt;/p&gt;

&lt;p&gt;Open’s override each other in turn so if another namespace/module is opened later that also defines a File then it will resolve to the one that was opened further down in the file.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someFn&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Generic&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someOtherFn&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// List now refers to the type from&lt;/span&gt;
                         &lt;span class=&quot;c1&quot;&gt;// System.Collections.Generic which&lt;/span&gt;
                         &lt;span class=&quot;c1&quot;&gt;// is different from the list literal&lt;/span&gt;
                         &lt;span class=&quot;c1&quot;&gt;// so we have to construct it explicitly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is no proper import aliasing as there is in Haskell or Python. You can alias values, functions, types and modules, but not namespaces. These aliases actually bind new values/functions/types/modules which is problematic if you are used to how this works in other languages because it is not limited to the file where this aliasing occurs (i.e. if you declare an alias like this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type File = System.IO.File&lt;/code&gt; in the f# source file A.fs and then in file B.fs that comes later in the source ordering open the namespace or module of A then File will be in scope!)&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// File A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... do something with File&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// File B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleA&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This type alias was declared in File A!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My recommended way of dealing with this is to use aliases but define them as private so that they are only visible within the same type/module, like so: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type private MyFile = System.IO.File&lt;/code&gt;. Then use open only when you know that you will use a lot of the contents of that namespace module and are aware of the potential shadowing.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// File A&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... do something with File&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// File B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleA&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeRecord&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is now a compiler error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;null&quot;&gt;Null&lt;/h3&gt;

&lt;p&gt;The story of null in the .NET Framework is a bit weird, so let me again give some context first. In the .NET Framework there exist for performance reasons value types that are directly allocated on the stack (e.g. primitives like int, float etc and user defined structs) as well as heap allocated reference types (strings and user defined classes). Most value types can be converted into reference types in a process called boxing (and the reverse unboxing) to matching reference types. This is mostly useful to be able to treat all values as derived from System.Object and have dynamic dispatch work for value types as well.&lt;/p&gt;

&lt;p&gt;As most languages designed in the 90ies, C# and the .NET framework both have null as a valid value for all reference types (though not for value types). Code that is written in F# tries to avoid null and so record types and discriminated unions defined in F# do not consider null a valid value. In cases where the absence of a value should be possible in F# the option type should be used which is a discriminated union that communicates this clearly and forces the consumer of such a type to always declare how to handle the absent value.&lt;/p&gt;

&lt;p&gt;Since a lot of the .NET ecosystem is written in C# though, you have to be defensive with reference type values that come from third party libraries and guard their use with isNull checks etc.&lt;/p&gt;

&lt;p&gt;Ironically, the designers of C# decided in C# 8 that the inability to discern between nullable and non-nullable reference types was a mistake and introduced a new annotation on types to indicate if null is a valid value for this reference type or not and added a special syntax to support this when declaring variables etc. The effort to retrofit these annotations to the standard library and third party libraries is still ongoing as of late 2020. F# does not yet support taking these annotations into account but the next version of F# will probably be able to do so, so that you get a warning when not handling nulls in reference values coming from third party libraries that are annotated as nullable but no such warnings coming up if the value is annotated as non-nullable.&lt;/p&gt;

&lt;h3 id=&quot;exceptions-vs-result&quot;&gt;Exceptions vs Result&lt;/h3&gt;

&lt;p&gt;The .NET Framework uses Exceptions as it’s primary means to communicate errors. Exceptions have quite a few advantages (e.g. call stacks which are useful in diagnostics, ability to add arbitrary structured information in subclasses, …) but also a few downsides (they do not show up in the type of a function; documenting possibly thrown exceptions is inconsistent in the ecosystem and not mandatory; they are relatively expensive to create and handle).&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// notice the type does not tell us about the exceptions&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// potentially thrown here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnThatDoublesOrThrows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A was less than 5&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doubled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnThatDoublesOrThrows&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doubling worked, result is %d&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doubled&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Got exception %A&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;F# offers another, complementory way of reporting errors back to the caller with the Result type. This is a simple discriminated union with two cases, the success and the error case. The nature of discriminated unions requires the user of a function returning a result to specify ways of handling both the success and the error case. The FsToolkit.ErrorHandling library is one of several that adds a few convenience solutions like computation expressions to make it nicer to write code that deals with a lot results, options, results wrapped in async computations and so on.&lt;/p&gt;

&lt;div class=&quot;language-fsharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// The result value tells us the type of the success and the error&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// case and all callers will have to explicity handle both&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnThatDoublesReturningResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A was less than 5&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnThatDoublesReturningResult&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doubling worked, result is %d&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okValue&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Err&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Doubling failed, err is %s&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just like with null values you have to deal with exceptions anyhow and some people argue that therefore exceptions should be used for all error cases. Others argue that Result should be preferred, maybe even trying to wrap all third party exceptions and using Result pretty much the only way of handling error cases. It seems that most real world solutions fall somewhere in between, dealing with third party exceptions while preferring Result for their own application code.&lt;/p&gt;

&lt;h3 id=&quot;scripts&quot;&gt;Scripts&lt;/h3&gt;

&lt;p&gt;F# code can either be created as F# projects organized by one or more .fsproj files that are compiled into one library/executable each or an F# script file (usually given the file extension .fsx instead of .fs) can be compiled and executed in one go in scripting mode. For scripting mode there were some large changes with .NET core 5 that came out in late 2020 that radically improved how third party libraries can be referenced and since then it is a lot nicer to use. There are still occasional issues with editor support in script files though.&lt;/p&gt;

&lt;p&gt;F# also has a repl that in dotnet core since 3.0 is started with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet fsi&lt;/code&gt;. It can also be used interactively from most browsers so that you can select a bunch of source code and send it to the repl to evaluate and the repl session will retain state until reset.&lt;/p&gt;

&lt;h2 id=&quot;into-the-future&quot;&gt;Into the future&lt;/h2&gt;

&lt;p&gt;F# has improved quite a lot these last few years. Four years ago I wrote about early attempts to use F# for both the backend and the frontend of a web application, before the SAFE stack was created. It could be done back then but the developer experience was far from great. Nowadays F# works really well for these kinds of things with all the bells and whistles you’d hope for (time travelling debugger for the state in the web application, hot module reloading, step through debugger for the server code, …).&lt;/p&gt;

&lt;p&gt;What is maybe somewhat lacking is a better repository for solutions to common problems. For JSON serialisation there are at least 5 solutions in F# that all have their pros and cons, but if you want to learn about their relative strengths and weaknesses you have to google it and hope that someone wrote a blog post. There is an F# wikibook that attempted something like this but is quite outdated.&lt;/p&gt;

&lt;p&gt;Another thing I hope for is that the F# developer tooling ecosystem becomes more sustainable. Visual Studio and Rider are developed by commercial entities, but FsAutocomplete and Ionide rely on donations via open collective that don’t really cover major work on it.&lt;/p&gt;

&lt;p&gt;All in all I think F# is a very valuable tool to learn and use. It is ready to use in production for a wide range of problems, and I think it is great fun to use. If you haven’t yet then do give it a try and let me know if you run into any issues that you think are worth including here1&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Dec 2020 00:00:00 -0600</pubDate>
        <link>https://danielbachler.de/2020/12/23/what-i-wish-i-knew-when-learning-fsharp.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2020/12/23/what-i-wish-i-knew-when-learning-fsharp.html</guid>
        
        
      </item>
    
      <item>
        <title>Thoughts on fighting climate change effectively</title>
        <description>&lt;p&gt;In the last few months, climate change has been discussed with renewed vigor in the media and on social networks. More and more people realize that we have a problem but a lot of the current focus doesn’t seem to be directed at the pragmatic goal we should be aiming for: mitigating climate change as far as possible.&lt;/p&gt;

&lt;p&gt;Increased levels of greenhouse gases in our atmosphere are the cause of climate change, and so the metric we need to look at is our global net total greenhouse gas emissions going forward (i.e. the absolute amount of CO2 or other greenhouse gases emitted minus whatever we manage to extract out of the atmosphere through additional trees or via technological means). Reducing our emissions quickly to a low enough level will be a tremendous challenge.&lt;/p&gt;

&lt;p&gt;I wrote this post out of frustration with the current public discourse that doesn’t focus on achieving this goal effectively. I am not a climate scientist and thus this post can only collect a few high level ideas that I consider important but neglected. I tried to collect some numbers that provide a useful frame of reference, but of course they cannot give a complete picture. Take what I write with a healthy dose of skepticism - but I do hope that it will be valuable perspective.&lt;/p&gt;

&lt;h2 id=&quot;the-current-discourse&quot;&gt;The current discourse&lt;/h2&gt;

&lt;p&gt;A lot of the current public discussion focuses on personal consumption lifestyle choices and moral arguments and I think that this is a harmful distraction. As Elizabeth Warren recently said in her poignant style:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;“This is exactly what the fossil fuel industry wants us to talk about. … They want to be able to stir up a lot of controversy around your lightbulbs, around your straws, and around your cheeseburgers, when 70 percent of the pollution, of the carbon that we’re throwing into the air, comes from three industries […] construction, electricity generation and the oil industry” – Elizabeth Warren&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;I see three main problems with the personal consumption and lifestyle choices arguments. First, it seems to me that public attention is a very precious good and that one can think of this as a public attention budget that is quite limited. Concentrate too much on actions that have only very minor impact on absolute CO2 emissions and you risk saturating your audience without having much effect. It is therefore important that public attention is focused on getting the big political solutions in place and not waste time debating whether or not eating beef is morally justifiable.&lt;/p&gt;

&lt;p&gt;Second, framing the problem as a moral question of personal consumption choices just does not have enough potential to reduce absolute emissions by a significant margin. Aviation for example accounts for 2% of global emissions. A voluntary consumption cut by rich consumers will not change nearly enough and we have to instead focus on aligning the entire global economy to emit less, going to net zero at some point this century.&lt;/p&gt;

&lt;p&gt;Third, the current rhetoric of moral arguments often invokes images of catastrophe. Tackling climate change is framed as a binary choice between dramatically changing everything — or extinction. In this lies a real danger of evoking hopelessness: the whole world will not change dramatically all at once, so why bother doing anything at all, especially giving up things you personally enjoy? If the situation is hopeless, shouldn’t we just enjoy it while it lasts?&lt;/p&gt;

&lt;h2 id=&quot;a-different-focus&quot;&gt;A different focus&lt;/h2&gt;

&lt;p&gt;Instead we should aim for solutions that can bring down absolute greenhouse gas emissions effectively and focus minds first on the areas that can really make a big difference. As I will outline below, I doubt that we will be able to still achieve a great or good outcome (staying below or 1.5 degrees or 2 degrees Celsius global warming respectively). &lt;label for=&quot;sn-temperature-increase&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-temperature-increase&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Timeline to reach certain temperature thresholds given the emission trajectory. We will pass 1.5 degree Celsius around 2030 in pretty much any scenario - &lt;a href=&quot;https://www.economist.com/briefing/2019/09/21/the-past-present-and-future-of-climate-change&quot;&gt;figure by The Economist&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.economist.com/sites/default/files/imagecache/640-width/images/2019/09/articles/body/20190921_fbc008.png&quot; alt=&quot;Emission scenarios for various emission trajectories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But if we can focus on areas where we can make big gains for moderate cost then I think it is still very much possible to achieve a moderately bad outcome of somewhat above 2 degree Celsius versus extremely negative outcomes for ecosystems and human livelihoods if we end up at 4 degree Celsius or above as is our current trajectory.&lt;/p&gt;

&lt;p&gt;If the reduction of absolute greenhouse gases is our goal, I think we should focus public discussion on the following three main areas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;span class=&quot;newthought&quot;&gt;a steadily increasing emission tax&lt;/span&gt;   or carbon tax to align profit incentives with emission reductions goals and let the market help with figuring out which emissions are the cheapest to replace first.&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;newthought&quot;&gt;more research, development and bootstrapping of technologies&lt;/span&gt;  to reduce emissions — especially in the neglected agricultural and steel/cement producing sectors as well as electricity storage&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;newthought&quot;&gt;a creative diplomatic effort&lt;/span&gt;  to create strong (trade) incentives for the big emerging economies to refrain from deploying coal for electricity production&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;an-outline-of-the-problem&quot;&gt;An outline of the problem&lt;/h2&gt;

&lt;p&gt;To frame the discussion, I think it is useful to recall a few important numbers. The scientific opinion of the UN’s panel for climate research, the IPCC, is that we should try to constraint global temperature rise by 2100 to ideally 1.5 or at most 2 degree Celsius versus pre-industrial average global temperature.&lt;/p&gt;

&lt;p&gt;A greenhouse gas emission budget can be calculated which expresses how many Gigatons of CO2 equivalent we can still put into the atmosphere to stay within a given temperature target. For 1.5 degrees, we have about 400 Gigatons left &lt;label for=&quot;sn-remaining-budget-1-5&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-remaining-budget-1-5&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Estimates for the budget to stay below a certain temperature target vary quite a bit but most are in this ballpark; this one is from the &lt;a href=&quot;https://www.mcc-berlin.net/en/research/co2-budget.html&quot;&gt;German MCC institute&lt;/a&gt;; Wikipedia has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Emissions_budget&quot;&gt;good overview&lt;/a&gt; of other estimates &lt;/span&gt;. We currently emit around 45 Gigatons CO2 equivalent per year (around 35 Gigatons CO2 as well as Methane from agriculture that is equivalent to another roughly 10 Gigatons of CO2 in its immediate effect). &lt;label for=&quot;mf-emission-paths&quot; class=&quot;margin-toggle&quot;&gt;⊕&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;mf-emission-paths&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;img class=&quot;fullwidth&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Emission_paths_for_reaching_the_Paris_Agreement.jpg/800px-Emission_paths_for_reaching_the_Paris_Agreement.jpg&quot; /&gt;&lt;br /&gt;Trajectories for attempting to stay within a 600 Gigaton CO2 budget - &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Emission_paths_for_reaching_the_Paris_Agreement.jpg&quot;&gt;figure by Stefan Rahmstorf via Wikipedia&lt;/a&gt;&lt;/span&gt; If you do the math, this means we can go on emitting at the current level for around 9 years and then have to go to 0 net emissions immediately; hardly a realistic scenario. A smooth curve that reduces emissions steadily would still have to reduce emissions year on a year on an unprecedented level for all countries and all sectors simultaneously. Whichever way you turn it, the 1.5 degree target looks pretty unrealistic at this point.&lt;/p&gt;

&lt;p&gt;To stay within 2 degrees warming, we have about another 800 Gigatons left. This gives us another 18 years or so at current emission to be distributed over the next few decades. Unfortunately, the trend curve of global emissions does not point down — it is instead still rising:&lt;/p&gt;

&lt;p&gt;
&lt;iframe src=&quot;https://ourworldindata.org/grapher/annual-co2-emissions-per-country?tab=chart&amp;amp;year=2016&amp;amp;time=1900..2017&amp;amp;country=OWID_WRL&quot; style=&quot;width: 100%; height: 600px; border: 0px none;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There are stark differences in our capacity to replace certain kinds of carbon intense energy sources. Some, like using kerosene for aviation will be very tough to replace because of the incredible energy density of kerosene and similar fuels. But in other areas we are much closer to fully replace them. The most significant such example is using coal for the generation of electricity and heat. Using coal for electricity and heat production makes up around 40% (!) of all CO2 emissions. In addition to that, burning coal pollutes the air, not just with harmful soot, dust particles and smog but also with substantial amounts of radioactive isotopes. Yet for electricity generation we now have tools like wind and solar power that are cost competitive with coal (and in many parts of the rich world already even cheaper). Full replacement is not yet possible with current technology because we are missing the crucial ingredient of durable large scale energy storage, but we could already replace a large fraction of coal power plants today with renewables given the will and the right economic incentives.&lt;/p&gt;

&lt;p&gt;
&lt;iframe src=&quot;https://ourworldindata.org/grapher/CO2-by-source?stackMode=absolute&amp;amp;time=1900..2017&quot; style=&quot;width: 100%; height: 600px; border: 0px none;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It is worth noting that the higher the temperature increase will end up being, the worse the repercussions for our ecosystems and our habitable areas and global living standards will be. Thus, even if we slightly miss the 2 degree target, this would be a much better outcome than the ~3.5-4 degree increase we are currently on a trajectory towards. &lt;label for=&quot;sn-glen-peters&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-glen-peters&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://www.cicero.oslo.no/no/posts/klima/stylised-pathways-to-well-below-2c&quot;&gt;This article by Glen Peters&lt;/a&gt;, a climate scientist at the Cicero institute for climate research in Oslo is a sobering look at the feasibility of staying below 2 degrees &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ourworldindata.org/uploads/2018/04/Greenhouse-gas-emission-scenarios-01.png&quot; alt=&quot;Emission scenarios for various emission trajectories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we look at emissions by region we see that absolute emissions have started to slowly decline in the last few years in both Europe and the US, although at a very slow pace. At the same time, the emissions of especially China rose very quickly as it become wealthier and had big construction and energy needs. Climate diplomacy should therefore be an important part of the solution, but let’s first look at the things that rich countries (such as Germany, where I live) can do by themselves.&lt;/p&gt;

&lt;p&gt;
&lt;iframe src=&quot;https://ourworldindata.org/grapher/annual-co2-emissions-per-country?tab=chart&amp;amp;year=2016&amp;amp;time=1900..2017&amp;amp;country=BRA+CHN+EU-28+IND+USA&quot; style=&quot;width: 100%; height: 600px; border: 0px none;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2 id=&quot;the-case-for-a-carbon-tax&quot;&gt;The case for a carbon tax&lt;/h2&gt;

&lt;p&gt;Quite a few climate activists on the left argue that Capitalism is to blame for climate change and that to combat climate change we should reach for non market based solutions; consumption overall should be lowered, either voluntarily or, if necessary and possible, by force. I think that this is wrong and that we should instead try to come up with incentives and mechanisms that align capitalist interests with reducing emissions. GDP growth is not intrinsically linked to growing resource consumption as the service sector can be a driver of GDP growth. Emissions and GDP growth are already decoupling in rich economies with emissions slowly falling and GDP steadily increasing — we now have to speed this process up. One great way of doing this is a carbon tax that would be levied on all forms of fossil fuels. At a sufficient level it would bring corporations and people to reduce their emissions just so they pay less in taxes. It would mean that areas where switching to clean sources of energy are easiest and therefore most lucrative would do so first, out of pure monetary considerations.&lt;/p&gt;

&lt;p&gt;An emissions trading scheme if designed well could also work instead of a carbon tax; here, a fixed number of certificates for emissions is generated by the state and these are then traded in a market where polluters have to buy certificates for their emissions. The end result of both strategies when designed well is similar, just the way of getting there is different. In a trading scheme the emissions are fixed and the price is cleared by the market; when using a carbon tax, the price for emissions is set and the emissions fall accordingly. I slightly prefer a carbon tax because the stable and increasing price can be used for long term planning. It is also more transparent: the price for heating oil for the normal consumer would carry the same markup as that paid for industry that burns coal for steel production per unit of CO2 emissions. But both would be fine if the details are right.&lt;/p&gt;

&lt;p&gt;Even an imperfect tax would already be a good step. Three things are important to get right: first, a carbon tax has to include all sources of energy that come from fossil fuels, including coal used for electricity production. Second, the tax has to start at a high enough level (35-70 Euro / ton of CO2 is thought to be an acceptable level and is also what international oil companies anticipated and used for the past few years internally to decide long term investments &lt;label for=&quot;sn-vox-overview&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-vox-overview&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Estimates for the social cost of a ton of CO2 vary substantially. The &lt;a href=&quot;https://www.smartcitiesdive.com/news/carbon-pricing-paris-agreement-emissions-goals/533139/&quot;&gt;35 to 70 EUR / ton of CO2 is referenced here e.g.&lt;/a&gt;. Vox has a good overview of &lt;a href=&quot;https://www.vox.com/energy-and-environment/2018/7/20/17584376/carbon-tax-congress-republicans-cost-economy&quot;&gt;carbon tax proposals&lt;/a&gt; that talks about various issues of carbon taxes &lt;/span&gt;). Third, it should subsequently increase year by year by at least a few percentage points &lt;label for=&quot;sn-tax-rise&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-tax-rise&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;(a 3% annual would mean a doubling of the tax every 25 years, a more ambitous 7% annual rise would double the price every 10 years) &lt;/span&gt; to constantly raise the pressure on emitters.&lt;/p&gt;

&lt;p&gt;One of the most important effects of a carbon tax (at a high enough level) is that it would make running existing coal power plants uneconomic in the near future in the rich world. By making emissions from firing coal more expensive, the markets would have an incentive to switch to lower emission alternatives.&lt;/p&gt;

&lt;p&gt;Looking at the transport sector, modern cars emit a ton of CO2 for roughly every 8.000 kilometers they drive &lt;label for=&quot;sn-co2-per-km&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-co2-per-km&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The EU mandates that new cars can only emit a certain amount of CO2 per driven kilometer. It targets fleet wide averages, the current of 130g CO2 / km is from 2015, for 2021 a &lt;a href=&quot;https://ec.europa.eu/clima/policies/transport/vehicles/cars_en&quot;&gt;lowering to 95 g CO2 / km is planned&lt;/a&gt;  &lt;/span&gt;. Coincidentally, the amount of CO2 emitted when travelling by airplane in modern passengers airplanes at close to capacity is roughly similar for the distance travelled - traveling 1000 km via plane produces roughly the same emissions as travelling the same distance alone in a car &lt;label for=&quot;sn-flight-emissions&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-flight-emissions&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://www.carbonindependent.org/22.html&quot;&gt;Carbonindependent&lt;/a&gt; has an overview that shows how this comparison is calculated. Raw CO2 Emissions are actually lower per passenger kilometer at around 90g CO2/km but emitting them at high altitude is probably significantly worse for the climate and so the number that is used is 180g CO2/km, somewhat higher than that of cars. It shows how crazy inefficient our cars are with their heavy weight and poor energy efficiency.  &lt;/span&gt;. Kerosene, the fuel for jets, is not taxed at all for international flights, which definitely has to be rectified. If you were to apply a carbon tax to Kerosene as well at initially 50 € / ton, a plane ticket for a return flight of a distance of 1000 km would incur additional initial taxes of around 15 Euros.&lt;/p&gt;

&lt;p&gt;In transport one interesting thing is that taxation is so different in different areas for historic reasons. Petrol and diesel for cars is taxed quite substantially already in many European countries, in Germany for example at 65 cents / liter for petrol which comes down to around 250 € / ton of CO2 &lt;label for=&quot;sn-petrol-taxes&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-petrol-taxes&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;I have created a Nextjournal notebook with &lt;a href=&quot;https://nextjournal.com/danielbachler/climate-change-calculations&quot;&gt;this and various other auxiliary calculations&lt;/a&gt; &lt;/span&gt;. The revenue of the tax is in parts used to pay for roads etc. but in the context of a carbon tax it can already be seen as increasing the wholesale price by a government decreed level.&lt;/p&gt;

&lt;p&gt;In Europe the goal should thus be to create a carbon tax that acts as a minimum base line of taxation for all uses of fossil fuels (especially coal and kerosene), while leaving the higher petrol prices where they are at the moment but maybe shifting how the revenues are used (see below).&lt;/p&gt;

&lt;p&gt;In the US to the best of my knowledge the current level of taxation is far too low (and there are even tax breaks for certain forms of fossil fuels). In the US as well as in other rich countries where fossil fuels aren’t taxed at this minimum level, introducing a carbon tax should be a main political goal.&lt;/p&gt;

&lt;p&gt;To make such a tax politically viable and avoid broad opposition, the windfall from such a tax should be directly sent to citizens as quarterly or yearly flat per capita cash payments (as opposed to lowering income taxes or similar which would be less visible and would benefit richer people more). This way companies and individuals could each try to lower their particular fossil fuel consumption to pay less tax and the proceeds would be distributed equally, thus being very regressive in effect since a few hundred euro a year are a much bigger benefit for a poor family than for a rich one.&lt;/p&gt;

&lt;p&gt;If a carbon tax would be levied at 50 € / ton, the tax income for a country like the US given its current emissions would be around 240 billion €, so every resident would be paid around 750 € per year &lt;label for=&quot;sn-us-carbon-tax&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-us-carbon-tax&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This and other calculations in this post can be found in this &lt;a href=&quot;https://nextjournal.com/danielbachler/climate-change-calculations&quot;&gt;Nextjournal notebook&lt;/a&gt; &lt;/span&gt;. Inequality is a big concern when it comes to energy taxes since often rural populations are both poorer and have higher energy consumption needs per capita. However, since the tax would be collected from industry as well as individuals but the proceeds be paid out to individuals only, the immediate additional expenses from fuel and heating should be offset by the payouts for most people, including poorer rural families (indirectly the costs for energy intensive products would rise by the additional taxes incurred in their production but I think that such effects would not be as visible to consumers and consumed more by higher income segments)&lt;/p&gt;

&lt;p&gt;Vested interests in energy intensive export industry will rally against this on the grounds that it will disadvantage them versus their international competitors. Here I would argue that this is not a strong enough reason against such a tax given the overall benefits. Additionally, by pioneering low carbon technologies they will be in a much better position internationally in the medium term when other countries follow suit. But in the end it will be a political fight to get companies to accept this.&lt;/p&gt;

&lt;h2 id=&quot;research-and-technology&quot;&gt;Research and technology&lt;/h2&gt;

&lt;p&gt;The second area I think we should focus on is investment in research and development of climate change mitigation technology. Rich countries should lead the way here and heavily invest in such research and share the proceeds generously with poorer countries. We need to think about different time horizons and find solutions to help over the short term (the next ten years), the medium term (the next 25 years) and the longer term (technology that will only be ready in the second half of the century). We should raise budgets for research and development drastically — the earlier we get new technology to a point where it can be used, the more impact it will have over the course of the 21st century. We need innovation in many sectors, but here are a few promising areas and ideas:&lt;/p&gt;

&lt;p&gt;For the short term, one area of research and development to focus on are sectors with big emissions that have been neglected so far, like agriculture and construction. To get an idea of the magnitudes, consider that if we could half the emissions of producing concrete we would do much more for the planet than if we got rid of all air traffic (aviation accounts for roughly 2% of global emissions, cement use for 8% &lt;label for=&quot;sn-cement&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-cement&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Chatham house is a good resource on &lt;a href=&quot;https://reader.chathamhouse.org/making-concrete-change-innovation-low-carbon-cement-and-concrete#&quot;&gt;lowering cement emissions&lt;/a&gt;. Gatesnotes has a great broader overview of &lt;a href=&quot;https://www.gatesnotes.com/Energy/A-question-to-ask-about-every-climate-plan&quot;&gt;ideas around construction that incorporates plastic and steel&lt;/a&gt; &lt;/span&gt;). Among the promising research ideas for agriculture is the idea that adding a little bit of certain algae to the feed of cattle drastically reduces their Methane emissions &lt;label for=&quot;sn-algae&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-algae&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;MIT Technology review has a &lt;a href=&quot;https://www.technologyreview.com/s/612452/how-seaweed-could-shrink-livestocks-global-carbon-hoofprint/&quot;&gt;good article&lt;/a&gt; about this &lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Electricity production is responsible for a large part of CO2 emissions because a lot of it is produced by burning coal, oil or gas. Luckily with photovoltaics and wind power we already have cost competitive alternatives, but the big missing part is electricity storage on a grid scale. Chemical batteries are expensive, toxic and have limited live times. The main tool we have to store electrical power is water pump storage, where excess electricity is used to pump water up into the dams of hydro power stations and then released again when demand is high. Innovations will be desperately needed in this area and should be a big focus of research. One interesting approach for electricity storage is the idea of stacking concrete blocks on top of each other to use them similar to pump storage, like Energy Vault is planning to do &lt;label for=&quot;sn-energy-vault&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-energy-vault&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;See &lt;a href=&quot;https://energyvault.com/&quot;&gt;the Energy Vault website&lt;/a&gt; for an animation of how this could work. If this could be scaled up it would make a great combination for large scale solar installations &lt;/span&gt;. Synthesis of complex hydrocarbons from atmospheric CO2 with renewable electricity directly from sunlight via artificial photosynthesis would also be a promising avenue of energy storage, since the existing oil based infrastructure we have could be used with such CO2 neutral fuels. All of these areas would be a good examples in the short to mid term category.&lt;/p&gt;

&lt;p&gt;Finally for the long term we should start doing research and development for alternative means of “negative emissions”. These are ways to get CO2 out of the atmosphere again - either by using new technology or, more traditionally, by planting new trees. Remarkably, all IPCC scenarios that end up with warming of less than 2 degrees Celsius by 2100 depend on large amounts of negative emissions in the second half of the 21st century - there is simply no realistic alternative anymore for getting there with emission cuts alone.&lt;/p&gt;

&lt;p&gt;Planting trees, especially ones that grow quickly like the Empress tree is a remarkably efficient way of getting CO2 out of the atmosphere &lt;label for=&quot;sn-empress-trees&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-empress-trees&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://www.bloomberg.com/news/features/2019-08-02/we-already-have-the-world-s-most-efficient-carbon-capture-technology&quot;&gt;Bloomberg has a good story about the Empress Tree&lt;/a&gt;. These trees use a cellular energy pathway called &lt;a href=&quot;https://en.wikipedia.org/wiki/C4_carbon_fixation&quot;&gt;C4 carbon fixation&lt;/a&gt; that is more efficient at extracting carbon from CO2 than that used by most trees (it is common in grasses though) &lt;/span&gt;. It’s something that we will probably have to do on a significant scale. But there might be room to create even more efficient ways of capturing carbon out of the atmosphere. One such example is carbon capture and storage, where carbon is extracted at concentrated producers (e.g. industry plants that can’t easily substitute generating CO2) and then stored underground or turned into hard form and used in other ways &lt;label for=&quot;sn-ccs&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-ccs&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;http://carbon.ycombinator.com/&quot;&gt;Ycombinator has a great overview of some approaches in this space&lt;/a&gt; &lt;/span&gt;. There might also be more efficient ways for biological cells to sequester carbon from the atmosphere. The naturally evolved plants and trees that use chlorophyll reflect green light instead of appearing black which means that they absorb a large fraction of visible light spectrum, probably because they would otherwise get too hot or accumulate too many free radicals. It is possible that bacteria or other small organisms could be optimized for absorbing CO2 from the atmosphere with much higher efficiency.&lt;/p&gt;

&lt;p&gt;We should also put more research into a viable plan B for the case where we can’t get enough global cooperation to reduce CO2 levels enough and carbon capture turns out too expensive and we need to try and cool our planet directly with geoengineering. It would be best if we never need to use such solutions, but it would be prudent to start developing them now — just in case.&lt;/p&gt;

&lt;p&gt;We should also try to be clever in how we push technologies that are getting to the cusp of viability by designing competitions with big prizes for commercialization (Similar to what the US military arm DARPA did in the early 2010s for self driving vehicles). We should subsidize carbon mitigating technologies that are not competitive yet. Germany half-knowingly did something like this in the 2000s with their subsidy for solar power - it created a solar industry (first in Germany, then in China) which led to the rapid tumbling of prices of production. Because of this we now have solar energy that is so cheap that in many places it is cheaper than coal for new power plants. (But at the same time we of course have German consumers fed up with high prices that make it hard to get off the dirty lignite coal — getting the balance right in theses things is hard).&lt;/p&gt;

&lt;h2 id=&quot;climate-diplomacy&quot;&gt;Climate diplomacy&lt;/h2&gt;

&lt;p&gt;But neither a wide use of carbon taxes in rich countries nor strong research programs will make much of a difference if we do not also focus on another crucial element: climate diplomacy. Today, China emits more greenhouse gases than the US and Europe combined. Both India and China are rapidly building new coal power plants. As their wealth and living standards improve, many not-yet rich countries will need energy and construction on a large scale (yes, some of the emissions attributed to China are for products that are exported to rich countries but this is only about ~13% of China’s total emissions &lt;label for=&quot;sn-china-export&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-china-export&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;&lt;a href=&quot;https://ourworldindata.org/co2-and-other-greenhouse-gas-emissions#co2-embedded-in-trade&quot;&gt;Our World in Data&lt;/a&gt; has more information on this topic &lt;/span&gt;). In absolute terms, coming up with good solutions to reduce these emissions is of paramount importance.&lt;/p&gt;

&lt;p&gt;Here I think we should get creative with trade deal incentives and similar offerings. If the EU could strike an attractive deal with China that would hinge on the condition of replacing (or refraining from building) coal power with clean alternatives, then this might be a tremendously effective way of reducing emissions. Additionally, such a deal could provide a blueprint for other countries as well — the greener you build your electricity grid etc, the more we open our markets for you. An example of this could be that “low emission beef” could be exempt from import duties.&lt;/p&gt;

&lt;p&gt;A historic blueprint we could use as inspiration is the Marshall plan. Europe, the US and Japan should think about ways of using direct investment and similar tools on a large scale to create clean energy in emerging economies. Another area that is worth thinking about is how to reward countries with forests for not destroying those in favor of short term profits. The challenge will be to create good incentive structures and modes of governance; it must not become a form of eco-colonialism. If we get this right, it could have a huge return investment in terms of greenhouse gas emissions.&lt;/p&gt;

&lt;p&gt;In this post I focused on net absolute CO2 emissions but very often you hear different arguments that are based on per-capita emissions or historic total emissions. They can be a backdrop for political solutions but in the end the only thing that matters going forward are absolute emissions. Indeed, rich nations got rich by consuming vast amounts of carbon based energy and still consume more fossil fuels per capita. But high historic emissions in the rich world can’t translate into emerging economies now using similar amounts of fossil fuels. The moral dimension of the argument should translate into a strong research effort and sharing the results freely, thus helping other countries walk a better path towards prosperity while still becoming rich. Add to this that most of the “low-hanging fruit” regarding CO2 emissions will be found in the world’s coal power stations that are active now or currently under construction, many of which in the emerging economies. We all have to reduce our greenhouse gas emissions, but we shouldn’t let per capita arguments get in the way of efficient solutions.&lt;/p&gt;

&lt;h2 id=&quot;what-can-we-do&quot;&gt;What can we do?&lt;/h2&gt;

&lt;p&gt;This problem of tackling climate change is very hard — our governance structures and decision horizons are ill aligned with the scale and duration of the problem of climate change. The situation is bad, but we have the power to drastically lessen a potentially terrible outcome for the wider ecosystems, ourselves in the future and for future generations.&lt;/p&gt;

&lt;p&gt;So what are we to do as individuals? I think the primary focus should be to push politics and public discourse to concentrate on effective means to reduce total global emissions via any means that work. In the rich countries we should make sure to do our own part and not look hypocrite (looking at you, German lignite plants) — but the best leverage for the overall picture will be to unleash the power of technology and market incentives while making sure that they help the currently growing countries the most.&lt;/p&gt;

&lt;p&gt;If you are a politician (or know one), try shifting the position of your party towards effective means of greenhouse gas emission reduction. If you are a journalist (or know one), I think it would be great to use the limited airtime the topic of global warming has to focus minds on the big payoffs, not on small individual contributions. If you are neither, think about where you can influence public discourse in other ways - attending demonstrations, writing about it, or making the case face to face. In all of these efforts, the focus should be efficient reduction of absolute global CO2 emissions and aiming for big wins in all areas where they are possible and to demonstrate that as voters we want a carbon tax and similar measures to be enacted.&lt;/p&gt;

&lt;p&gt;If you are in science or technology, consider switching to research or engineering related to global warming, especially in currently under-appreciated areas. So far the only time I would say international coordination in favour of climate policy worked well was around banning CFCs to stop the destruction of the Ozone layer (which also had a huge mitigating effect and avoided even faster global warming). Political action was only viable because technological alternatives were available (and affordable). In many areas today I think we are still missing economically viable alternatives to current greenhouse gas emitting technology. Bret Victor’s essay &lt;a href=&quot;http://worrydream.com/ClimateChange/&quot;&gt;“What can a technologist do about climate change?”&lt;/a&gt; is an excellent resource on framing the climate change problem and thinking about technological solutions.&lt;/p&gt;

&lt;p&gt;If you are in diplomacy or a think tank, consider switching to a role where you can come up with creative ideas for climate diplomacy. This is a space that I think is currently woefully neglected to a point where even the European Green parties don’t seem to give it much thought. We need to push this idea into the political mainstream.&lt;/p&gt;

&lt;p&gt;Finally, I think it’s important that global warming becomes a major point in making voting decisions — basically a party without a clear agenda to effectively reduce greenhouse gases should stop being a viable option for as many people as possible. It is my hope that this will play out more and more at least in Europe and create competition on this topic between parties. Where currently the various green parties are often seen as the only ones even aiming to do anything in this space there is a big underexplored political space for liberal or center-conservative parties to try to put forward more pragmatic and economically attractive alternatives to the often very ideological party programs of the greens. I would love to see conservative parties giving greens a hard time on global warming topics for mainstream voters — however unrealistic this may seem at the moment.&lt;/p&gt;

&lt;p&gt;Working against climate change will be a major challenge for all of us for the rest of our lives. There will be many setbacks and counter trends. But this makes it all the more important to try to target efforts at big absolute reductions that are supported by a large public and not get lost in inconsequential arguments about things that don’t have much potential for bringing absolute emissions down. Let’s work on this. &lt;label for=&quot;sn-thanks&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-thanks&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;Many thanks to all the people who have read drafts of this post and given their feedback, especially Teresa, Jonathan, Fredrik and Timo. &lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Sep 2019 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2019/09/12/fighing-climate-change-effectivly.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2019/09/12/fighing-climate-change-effectivly.html</guid>
        
        
      </item>
    
      <item>
        <title>Interviewed by the Working Draft podcast (German)</title>
        <description>&lt;p&gt;The frontend programming podcast &lt;a href=&quot;https://workingdraft.de/&quot;&gt;Working Draft&lt;/a&gt; interviewed me recently and we talked about Elm and F# . &lt;a href=&quot;https://workingdraft.de/396/&quot;&gt;Hop over to the interview&lt;/a&gt; and let me know on &lt;a href=&quot;https://twitter.com/danyx23&quot;&gt;twitter&lt;/a&gt; if you have any comments!&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Sep 2019 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2019/09/10/interview-with-working-draft.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2019/09/10/interview-with-working-draft.html</guid>
        
        
      </item>
    
      <item>
        <title>The state of software engineering</title>
        <description>&lt;p&gt;The field of software engineering is in a strange place today. A lot of the mainstream tools and concepts look less like deliberate choices made by intelligent people anticipating change and more like ad-hoc reuse of things some people were already familiar with, despite the problems this may cause at scale. Things I consider to be concrete examples of this are all the major programming languages (Java, C#, Python, C++ that don’t even have &lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;algebraic data types&lt;/a&gt; that are around since the 70ies), docker containers (where the usual way of constructing them leads to linear dependencies which lead to &lt;a href=&quot;https://grahamc.com/blog/nix-and-layered-docker-images&quot;&gt;poor composability&lt;/a&gt;), YAML as a configuration format (with its &lt;a href=&quot;https://arp242.net/yaml-config.html#surprising-behaviour&quot;&gt;many pitfalls and high complexity&lt;/a&gt;), Microservices as almost a default architecture choice - the list goes on. This is not to say that I don’t consider these things useful in certain situations - it just strikes me as odd that the majority of our industry sees little problem with the status quo of defaulting to these options and that there are so few attempt at improving things.&lt;/p&gt;

&lt;p&gt;Maybe my experiences with &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; and &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; have spoiled me - I was lucky enough to use both on my job for the last three years. I feel like so many of the problems I regularly encountered in the previous ten years of doing mostly C#, some Ruby, Python, Javascript and C++ - are just gone. In Elm (and with some caveats in F#) you don’t need to worry about null values or exceptions; you don’t spend your time discussing pointless ontological questions and creating strange inheritance hierarchies that couple logic depending solely on the answer to the question “Can you say A IS-A B?”.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/files/customer-employee.jpg&quot; alt=&quot;Customer and Employee inherit from Person&quot; title=&quot;Customer and Employee inherit from Person&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/files/tightly-coupled.jpg&quot; alt=&quot;Should the code for them be tightly coupled?&quot; title=&quot;Should the code for them be tightly coupled?&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/files/is-a-person.jpg&quot; alt=&quot;Customer IS-A Person! Employee IS-A Person!&quot; title=&quot;Customer IS-A Person! Employee IS-A Person!&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In Elm, F# and similar languages, you write functions that deal with data, you model data in different forms accurately with algebraic data types and you let the compiler use the types to check if the shape of your data matches in all places. Because values are immutable, state changes only in a few well defined places. Elaborate “magic” like two-way databinding is replaced with simpler patterns like the &lt;a href=&quot;https://medium.com/@l.mugnaini/the-elm-architecture-tea-animation-3efc555e8faf&quot;&gt;Elm architecture&lt;/a&gt;. Such patterns look a bit more verbose in the beginning, but as the application that uses it grows it always behaves predictably. This is something I have never seen with two-way data binding UI frameworks at non-trivial scale.&lt;/p&gt;

&lt;p&gt;Of course types are not everything and using Elm or &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; etc. to implement some software will not magically make it bug free. But what they afford you to do is to concentrate on the interesting parts of your code and test more interesting properties since the technicalities are taken care of by a compiler. Refactoring complex pieces of software becomes a mundane tasks of following compiler errors instead of the Russian roulette it is in languages without static typing or with a poor type system. Since software tends to grow in size and requirements tend to change, I consider this to be a big advantage.&lt;/p&gt;

&lt;p&gt;All that is not so say that languages like Elm, F#, Haskell and &lt;a href=&quot;http://www.purescript.org/&quot;&gt;Purescript&lt;/a&gt; cannot improve further. By listening to the excellent &lt;a href=&quot;https://futureofcoding.org/&quot;&gt;Future of coding&lt;/a&gt; podcast I found &lt;a href=&quot;https://pharo.org/&quot;&gt;Pharo&lt;/a&gt;, a language strongly inspired by Smalltalk, and the &lt;a href=&quot;https://gtoolkit.com/&quot;&gt;Glamorous toolkit&lt;/a&gt;. The Glamorous toolkit places a high value on an interactive canvas that can be used to understand your code. How great would it be if there were a standard way for an ML family language to ship interactive debugging UIs with standard libraries that aid in your debugging and REPL experience? Think e.g. a monadic probability library that visualizes distributions while you work with it in the REPL.&lt;/p&gt;

&lt;p&gt;The power of Erlangs VM with hot code swapping and &lt;a href=&quot;http://erlang.org/documentation/doc-4.9.1/doc/design_principles/sup_princ.html&quot;&gt;supervision trees&lt;/a&gt; is very desirable, even more so if messages could be typed with something like &lt;a href=&quot;http://groups.inf.ed.ac.uk/abcd/session-implementations.html&quot;&gt;session types&lt;/a&gt;. Algebraic effects like in the &lt;a href=&quot;http://www.eff-lang.org/&quot;&gt;Eff language&lt;/a&gt; look like a very promising way for handling side effects (I/O, concurrency, exceptions, …), so they can be separated from the pure code but without the pain of monad transformer stacks. &lt;a href=&quot;https://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; which is built in &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; is a really interesting way of dealing with data queries and between that and &lt;a href=&quot;https://en.wikipedia.org/wiki/Prolog&quot;&gt;Prolog&lt;/a&gt; I think there is a lot of unexplored scope of embedding reasoning/analytics engines in ML family languages.&lt;/p&gt;

&lt;p&gt;I find it strange that not more programmers see the value of ML like languages for larger projects. Do so few know these languages in enough detail? Is the inertia so powerful, the desire to stay with what you already know? Many of the excuses of a few years ago, like bad editor tooling or small ecosystems apply less and less (and some languages have a strong FFI that lets you tap into other languages’ ecosystems).&lt;/p&gt;

&lt;p&gt;Maybe one of the reasons is that evaluating technologies is often done on small examples where ease of setup and the speed of getting started are most important. Problems that only arise in bigger projects show up too late and by this time get confused as “this is just what programming in a large project looks like”.&lt;/p&gt;

&lt;p&gt;At my job we have one relatively complex backend written in Python - because at the time GraphQL support in ML languages was not developed far enough. To give praise where it is due, the Django admin interface was also a huge time saver - oh how I would love something like it to exist in F# for the &lt;a href=&quot;https://safe-stack.github.io/&quot;&gt;SAFE stack&lt;/a&gt;! We were very fast initially in getting the first version out but now every non-trivial change is a pain and we are just so slow in that codebase compared to the F# backends (and we make more mistakes). If I hadn’t had the F# experience, I might’ve mistaken this slowing down for an inevitable fact of refactoring code.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/files/a-lot-of-coffee.jpg&quot; alt=&quot;That's a lot of coffee&quot; title=&quot;That's a lot of coffee&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/files/a-lot-of-python.jpg&quot; alt=&quot;It's a lot of python&quot; title=&quot;It's a lot of python&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Maybe none of this is so surprising given how young our field is. The first people who worked with textual instructions for computers did so from around 1950 - if you assume that the working lifetime of a person is around 40 years then this is not even two generations ago. In that time we scaled from a few hundred to maybe around 20 million programmers. Pretty much all other engineering professions or crafts developed over much longer timespans and with an only moderate change in the number of practitioners from decade to decade. They had time to try ideas and evaluate their outcome over long timespans and to develop cultural institutions like guilds or engineering societies. To complicate matters, computers kept getting faster at an insane pace for most of the last 70 years - so received wisdom from a generation ago is often no longer applicable. Maybe these are just growing pains of a still relatively new field then?&lt;/p&gt;

&lt;p&gt;I would be more relaxed about this if it were not for the fact that the stakes are getting higher all the time. We are putting software into ever more areas of human life and into ever more critical situations - but the tools that are mainstream in our profession are error prone and limit our expressivity. Software development is still so often at the same time intellectually challenging and incredibly boring even in the best of cases.&lt;/p&gt;

&lt;p&gt;Some things give me hope, e.g. &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; is a great new language that improves many things for system programming from the previous status quo - and it seems to gain traction lately (Microsoft Security &lt;a href=&quot;https://msrc-blog.microsoft.com/2019/07/22/why-rust-for-safe-systems-programming/&quot;&gt;recommended it recently&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But when it comes to mainstream adoption, we are still so far behind what is easily possible today. So much software is buggy and needs crazy amounts of development time and is just so brittle all around. Metaphors are always problematic, but it feels a bit like as an industry we insist on building skyscrapers with clay and neglect to learn how to work with steel and concrete for no good reason.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/files/building-a-skyscraper.jpg&quot; alt=&quot;What are you building? Skyscraper.&quot; title=&quot;What are you building? Skyscraper.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/files/with-clay.jpg&quot; alt=&quot;With clay bricks? Sure.&quot; title=&quot;With clay bricks? Sure.&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/files/no-time-to-learn-that.jpg&quot; alt=&quot;Don't you think steel would be better? Don't have time learn that.&quot; title=&quot;Don't you think steel would be better? Don't have time learn that.&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I try to spread the word about these ideas with things like the &lt;a href=&quot;https://www.meetup.com/Friendly-Functional-Programming-Meetup-Berlin/&quot;&gt;Friendly Functional Programming Meetup Berlin&lt;/a&gt; that I run together with Michael, but I often feel like such events mostly reach those that already see the value of functional programming. I think our best bet is to work on creating entire toolchains that work well for pragmatic applications and then showcasing those. I think Elm did a good job on the web frontend side; the &lt;a href=&quot;https://safe-stack.github.io/&quot;&gt;SAFE stack&lt;/a&gt; does so quite well on the backend as well as the frontend; and &lt;a href=&quot;https://docs.servant.dev/en/stable/&quot;&gt;Servant&lt;/a&gt; does a great job at showing how useful full type level representations of HTTP APIs are because they let you type check both the client and server of a REST API at compile time from the same type definitions.&lt;/p&gt;

&lt;p&gt;I think as enthusiasts of these languages we should talk more about the pragmatic ways these powerful tools can enable us to do more work in less time to a higher quality standard. We should try less to explain Kleisli composition to outsiders (not that this is not useful, but the focus should be on the former IMHO). Maybe then we will find ourselves in a future where software is built on top of good abstractions, at high speed, and can be safely changed and modified. Let’s work towards that future.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Aug 2019 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2019/08/11/the-state-of-software-engineering.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2019/08/11/the-state-of-software-engineering.html</guid>
        
        
      </item>
    
      <item>
        <title>Interviewed by paqmind on Elm, Purescript, F# etc</title>
        <description>&lt;p&gt;The programming blog &lt;a href=&quot;https://paqmind.com&quot;&gt;paqmind&lt;/a&gt; interviewed me recently and we talked about Elm, Purescript, F# and other programming languages I love. &lt;a href=&quot;https://paqmind.com/blog/interview-with-danyx23/&quot;&gt;Hop over to the interview&lt;/a&gt; and let me know on &lt;a href=&quot;https://twitter.com/danyx23&quot;&gt;twitter&lt;/a&gt; if you have any comments!&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Aug 2018 00:00:00 -0500</pubDate>
        <link>https://danielbachler.de/2018/08/21/interview-with-paqmind-elm-fsharp-purescript.html</link>
        <guid isPermaLink="true">https://danielbachler.de/2018/08/21/interview-with-paqmind-elm-fsharp-purescript.html</guid>
        
        
      </item>
    
  </channel>
</rss>
